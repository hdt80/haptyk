
haptyk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00001396  0000142a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800148  00800148  00001472  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001472  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006f76  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000241a  00000000  00000000  0000870a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000071c5  00000000  00000000  0000ab24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007dc  00000000  00000000  00011cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000252b  00000000  00000000  000124c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cd5  00000000  00000000  000149f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000660  00000000  00000000  000186c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	9b c0       	rjmp	.+310    	; 0x138 <__ctors_end>
       2:	00 00       	nop
       4:	b5 c0       	rjmp	.+362    	; 0x170 <__bad_interrupt>
       6:	00 00       	nop
       8:	b3 c0       	rjmp	.+358    	; 0x170 <__bad_interrupt>
       a:	00 00       	nop
       c:	b1 c0       	rjmp	.+354    	; 0x170 <__bad_interrupt>
       e:	00 00       	nop
      10:	af c0       	rjmp	.+350    	; 0x170 <__bad_interrupt>
      12:	00 00       	nop
      14:	ad c0       	rjmp	.+346    	; 0x170 <__bad_interrupt>
      16:	00 00       	nop
      18:	ab c0       	rjmp	.+342    	; 0x170 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	a9 c0       	rjmp	.+338    	; 0x170 <__bad_interrupt>
      1e:	00 00       	nop
      20:	a7 c0       	rjmp	.+334    	; 0x170 <__bad_interrupt>
      22:	00 00       	nop
      24:	a5 c0       	rjmp	.+330    	; 0x170 <__bad_interrupt>
      26:	00 00       	nop
      28:	99 c3       	rjmp	.+1842   	; 0x75c <__vector_10>
      2a:	00 00       	nop
      2c:	a1 c0       	rjmp	.+322    	; 0x170 <__bad_interrupt>
      2e:	00 00       	nop
      30:	9f c0       	rjmp	.+318    	; 0x170 <__bad_interrupt>
      32:	00 00       	nop
      34:	9d c0       	rjmp	.+314    	; 0x170 <__bad_interrupt>
      36:	00 00       	nop
      38:	9b c0       	rjmp	.+310    	; 0x170 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	99 c0       	rjmp	.+306    	; 0x170 <__bad_interrupt>
      3e:	00 00       	nop
      40:	97 c0       	rjmp	.+302    	; 0x170 <__bad_interrupt>
      42:	00 00       	nop
      44:	95 c0       	rjmp	.+298    	; 0x170 <__bad_interrupt>
      46:	00 00       	nop
      48:	93 c0       	rjmp	.+294    	; 0x170 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c0       	rjmp	.+290    	; 0x170 <__bad_interrupt>
      4e:	00 00       	nop
      50:	8f c0       	rjmp	.+286    	; 0x170 <__bad_interrupt>
      52:	00 00       	nop
      54:	8d c0       	rjmp	.+282    	; 0x170 <__bad_interrupt>
      56:	00 00       	nop
      58:	8b c0       	rjmp	.+278    	; 0x170 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	89 c0       	rjmp	.+274    	; 0x170 <__bad_interrupt>
      5e:	00 00       	nop
      60:	87 c0       	rjmp	.+270    	; 0x170 <__bad_interrupt>
      62:	00 00       	nop
      64:	85 c0       	rjmp	.+266    	; 0x170 <__bad_interrupt>
      66:	00 00       	nop
      68:	83 c0       	rjmp	.+262    	; 0x170 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	81 c0       	rjmp	.+258    	; 0x170 <__bad_interrupt>
      6e:	00 00       	nop
      70:	7f c0       	rjmp	.+254    	; 0x170 <__bad_interrupt>
      72:	00 00       	nop
      74:	7d c0       	rjmp	.+250    	; 0x170 <__bad_interrupt>
      76:	00 00       	nop
      78:	7b c0       	rjmp	.+246    	; 0x170 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	79 c0       	rjmp	.+242    	; 0x170 <__bad_interrupt>
      7e:	00 00       	nop
      80:	77 c0       	rjmp	.+238    	; 0x170 <__bad_interrupt>
      82:	00 00       	nop
      84:	75 c0       	rjmp	.+234    	; 0x170 <__bad_interrupt>
      86:	00 00       	nop
      88:	73 c0       	rjmp	.+230    	; 0x170 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	71 c0       	rjmp	.+226    	; 0x170 <__bad_interrupt>
      8e:	00 00       	nop
      90:	6f c0       	rjmp	.+222    	; 0x170 <__bad_interrupt>
      92:	00 00       	nop
      94:	6d c0       	rjmp	.+218    	; 0x170 <__bad_interrupt>
      96:	00 00       	nop
      98:	6b c0       	rjmp	.+214    	; 0x170 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	69 c0       	rjmp	.+210    	; 0x170 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	67 c0       	rjmp	.+206    	; 0x170 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	65 c0       	rjmp	.+202    	; 0x170 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	63 c0       	rjmp	.+198    	; 0x170 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <ProductString>:
      ac:	1c 03 4c 00 55 00 46 00 41 00 20 00 43 00 44 00     ..L.U.F.A. .C.D.
      bc:	43 00 20 00 44 00 65 00 6d 00 6f 00 00 00           C. .D.e.m.o...

000000ca <ManufacturerString>:
      ca:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
      da:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

000000e4 <LanguageString>:
      e4:	04 03 09 04                                         ....

000000e8 <ConfigurationDescriptor>:
      e8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
      f8:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     108:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     118:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000126 <DeviceDescriptor>:
     126:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     136:	dc 01                                               ..

00000138 <__ctors_end>:
     138:	11 24       	eor	r1, r1
     13a:	1f be       	out	0x3f, r1	; 63
     13c:	cf ef       	ldi	r28, 0xFF	; 255
     13e:	da e0       	ldi	r29, 0x0A	; 10
     140:	de bf       	out	0x3e, r29	; 62
     142:	cd bf       	out	0x3d, r28	; 61

00000144 <__do_copy_data>:
     144:	11 e0       	ldi	r17, 0x01	; 1
     146:	a0 e0       	ldi	r26, 0x00	; 0
     148:	b1 e0       	ldi	r27, 0x01	; 1
     14a:	e6 e9       	ldi	r30, 0x96	; 150
     14c:	f3 e1       	ldi	r31, 0x13	; 19
     14e:	02 c0       	rjmp	.+4      	; 0x154 <__do_copy_data+0x10>
     150:	05 90       	lpm	r0, Z+
     152:	0d 92       	st	X+, r0
     154:	a8 34       	cpi	r26, 0x48	; 72
     156:	b1 07       	cpc	r27, r17
     158:	d9 f7       	brne	.-10     	; 0x150 <__do_copy_data+0xc>

0000015a <__do_clear_bss>:
     15a:	22 e0       	ldi	r18, 0x02	; 2
     15c:	a8 e4       	ldi	r26, 0x48	; 72
     15e:	b1 e0       	ldi	r27, 0x01	; 1
     160:	01 c0       	rjmp	.+2      	; 0x164 <.do_clear_bss_start>

00000162 <.do_clear_bss_loop>:
     162:	1d 92       	st	X+, r1

00000164 <.do_clear_bss_start>:
     164:	a5 35       	cpi	r26, 0x55	; 85
     166:	b2 07       	cpc	r27, r18
     168:	e1 f7       	brne	.-8      	; 0x162 <.do_clear_bss_loop>
     16a:	83 d0       	rcall	.+262    	; 0x272 <main>
     16c:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <_exit>

00000170 <__bad_interrupt>:
     170:	47 cf       	rjmp	.-370    	; 0x0 <__vectors>

00000172 <setup>:

	return 0;
}

void setup(void) {
	MCUSR &= ~(1 << WDRF);
     172:	84 b7       	in	r24, 0x34	; 52
     174:	87 7f       	andi	r24, 0xF7	; 247
     176:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	a8 95       	wdr
     17e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     182:	88 61       	ori	r24, 0x18	; 24
     184:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     188:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
     18c:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     18e:	80 e8       	ldi	r24, 0x80	; 128
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     19a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
     19e:	0f be       	out	0x3f, r0	; 63
	wdt_disable();

	clock_prescale_set(clock_div_1);

	USB_Init();
     1a0:	c0 d2       	rcall	.+1408   	; 0x722 <USB_Init>
	spi_init();
     1a2:	9f d5       	rcall	.+2878   	; 0xce2 <spi_init>
	bt_init();
     1a4:	47 d5       	rcall	.+2702   	; 0xc34 <bt_init>
     1a6:	78 94       	sei
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     1a8:	47 9a       	sbi	0x08, 7	; 8

	GlobalInterruptEnable();

	PORTC |= (1 << DDC7);
     1aa:	3f 9a       	sbi	0x07, 7	; 7
	DDRC |= (1 << DDC7);

	ht_log("Haptyk\n");
     1ac:	87 e0       	ldi	r24, 0x07	; 7
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0b d6       	rcall	.+3094   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1b2:	87 e0       	ldi	r24, 0x07	; 7
     1b4:	91 e0       	ldi	r25, 0x01	; 1
     1b6:	08 d6       	rcall	.+3088   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1b8:	87 e0       	ldi	r24, 0x07	; 7
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	05 d6       	rcall	.+3082   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1be:	87 e0       	ldi	r24, 0x07	; 7
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	02 d6       	rcall	.+3076   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1c4:	87 e0       	ldi	r24, 0x07	; 7
     1c6:	91 e0       	ldi	r25, 0x01	; 1
     1c8:	ff d5       	rcall	.+3070   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1ca:	87 e0       	ldi	r24, 0x07	; 7
     1cc:	91 e0       	ldi	r25, 0x01	; 1
     1ce:	fc d5       	rcall	.+3064   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1d0:	87 e0       	ldi	r24, 0x07	; 7
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	f9 d5       	rcall	.+3058   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1d6:	87 e0       	ldi	r24, 0x07	; 7
     1d8:	91 e0       	ldi	r25, 0x01	; 1
     1da:	f6 d5       	rcall	.+3052   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1dc:	87 e0       	ldi	r24, 0x07	; 7
     1de:	91 e0       	ldi	r25, 0x01	; 1
     1e0:	f3 d5       	rcall	.+3046   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1e2:	87 e0       	ldi	r24, 0x07	; 7
     1e4:	91 e0       	ldi	r25, 0x01	; 1
     1e6:	f0 d5       	rcall	.+3040   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1e8:	87 e0       	ldi	r24, 0x07	; 7
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	ed d5       	rcall	.+3034   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1ee:	87 e0       	ldi	r24, 0x07	; 7
     1f0:	91 e0       	ldi	r25, 0x01	; 1
     1f2:	ea d5       	rcall	.+3028   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1f4:	87 e0       	ldi	r24, 0x07	; 7
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	e7 d5       	rcall	.+3022   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     1fa:	87 e0       	ldi	r24, 0x07	; 7
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	e4 d5       	rcall	.+3016   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     200:	87 e0       	ldi	r24, 0x07	; 7
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	e1 d5       	rcall	.+3010   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     206:	87 e0       	ldi	r24, 0x07	; 7
     208:	91 e0       	ldi	r25, 0x01	; 1
     20a:	de d5       	rcall	.+3004   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     20c:	87 e0       	ldi	r24, 0x07	; 7
     20e:	91 e0       	ldi	r25, 0x01	; 1
     210:	db d5       	rcall	.+2998   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     212:	87 e0       	ldi	r24, 0x07	; 7
     214:	91 e0       	ldi	r25, 0x01	; 1
     216:	d8 d5       	rcall	.+2992   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     218:	87 e0       	ldi	r24, 0x07	; 7
     21a:	91 e0       	ldi	r25, 0x01	; 1
     21c:	d5 d5       	rcall	.+2986   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     21e:	87 e0       	ldi	r24, 0x07	; 7
     220:	91 e0       	ldi	r25, 0x01	; 1
     222:	d2 d5       	rcall	.+2980   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     224:	87 e0       	ldi	r24, 0x07	; 7
     226:	91 e0       	ldi	r25, 0x01	; 1
     228:	cf d5       	rcall	.+2974   	; 0xdc8 <ht_log>
     22a:	87 e0       	ldi	r24, 0x07	; 7
	ht_log("Haptyk\n");
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	cc d5       	rcall	.+2968   	; 0xdc8 <ht_log>
     230:	87 e0       	ldi	r24, 0x07	; 7
	ht_log("Haptyk\n");
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	c9 d5       	rcall	.+2962   	; 0xdc8 <ht_log>
     236:	87 e0       	ldi	r24, 0x07	; 7
     238:	91 e0       	ldi	r25, 0x01	; 1
	ht_log("Haptyk\n");
     23a:	c6 d5       	rcall	.+2956   	; 0xdc8 <ht_log>
     23c:	87 e0       	ldi	r24, 0x07	; 7
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	c3 d5       	rcall	.+2950   	; 0xdc8 <ht_log>
	ht_log("Haptyk\n");
     242:	87 e0       	ldi	r24, 0x07	; 7
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	c0 d5       	rcall	.+2944   	; 0xdc8 <ht_log>
     248:	87 e0       	ldi	r24, 0x07	; 7
	ht_log("Haptyk\n");
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	bd d5       	rcall	.+2938   	; 0xdc8 <ht_log>
     24e:	2f ef       	ldi	r18, 0xFF	; 255
     250:	83 e2       	ldi	r24, 0x23	; 35
	ht_log("Haptyk\n");
     252:	94 ef       	ldi	r25, 0xF4	; 244
     254:	21 50       	subi	r18, 0x01	; 1
     256:	80 40       	sbci	r24, 0x00	; 0
     258:	90 40       	sbci	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     25a:	e1 f7       	brne	.-8      	; 0x254 <setup+0xe2>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <setup+0xec>
     25e:	00 00       	nop
     260:	13 d5       	rcall	.+2598   	; 0xc88 <bt_connected>
     262:	2f ef       	ldi	r18, 0xFF	; 255
     264:	84 e3       	ldi	r24, 0x34	; 52
     266:	9c e0       	ldi	r25, 0x0C	; 12
     268:	21 50       	subi	r18, 0x01	; 1
     26a:	80 40       	sbci	r24, 0x00	; 0

	_delay_ms(10000);

	while (1) {
		bt_connected();
     26c:	90 40       	sbci	r25, 0x00	; 0
     26e:	e1 f7       	brne	.-8      	; 0x268 <setup+0xf6>
     270:	f5 cf       	rjmp	.-22     	; 0x25c <setup+0xea>

00000272 <main>:
     272:	7f df       	rcall	.-258    	; 0x172 <setup>

00000274 <EVENT_USB_Device_Connect>:
     274:	08 95       	ret

00000276 <EVENT_USB_Device_Disconnect>:
     276:	08 95       	ret

00000278 <EVENT_USB_Device_ConfigurationChanged>:
     278:	42 e0       	ldi	r20, 0x02	; 2
     27a:	61 ec       	ldi	r22, 0xC1	; 193
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	8f d1       	rcall	.+798    	; 0x59e <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     280:	42 e1       	ldi	r20, 0x12	; 18
     282:	61 e8       	ldi	r22, 0x81	; 129
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	8b d1       	rcall	.+790    	; 0x59e <Endpoint_ConfigureEndpoint_Prv>
     288:	42 e1       	ldi	r20, 0x12	; 18
     28a:	60 e8       	ldi	r22, 0x80	; 128
     28c:	84 e0       	ldi	r24, 0x04	; 4
     28e:	87 d1       	rcall	.+782    	; 0x59e <Endpoint_ConfigureEndpoint_Prv>
	ConfigSuccess &= Endpoint_ConfigureEndpoint(
			CDC_TX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);
	ConfigSuccess &= Endpoint_ConfigureEndpoint(
			CDC_RX_EPADDR, EP_TYPE_BULK,  CDC_TXRX_EPSIZE, 1);

	LineEncoding.BaudRateBPS = 0;
     290:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     294:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
     298:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_start+0x2>
     29c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_start+0x3>
}
     2a0:	08 95       	ret

000002a2 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void) {
	switch (USB_ControlRequest.bRequest) {
     2a2:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x1>
     2a6:	81 32       	cpi	r24, 0x21	; 33
     2a8:	b1 f0       	breq	.+44     	; 0x2d6 <EVENT_USB_Device_ControlRequest+0x34>
     2aa:	82 32       	cpi	r24, 0x22	; 34
     2ac:	41 f1       	breq	.+80     	; 0x2fe <EVENT_USB_Device_ControlRequest+0x5c>
     2ae:	80 32       	cpi	r24, 0x20	; 32
     2b0:	81 f5       	brne	.+96     	; 0x312 <EVENT_USB_Device_ControlRequest+0x70>
			}

			break;

		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) {
     2b2:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest>
     2b6:	81 32       	cpi	r24, 0x21	; 33
     2b8:	61 f5       	brne	.+88     	; 0x312 <EVENT_USB_Device_ControlRequest+0x70>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     2ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2be:	87 7f       	andi	r24, 0xF7	; 247
     2c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearSETUP();
				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
     2c4:	67 e0       	ldi	r22, 0x07	; 7
     2c6:	70 e0       	ldi	r23, 0x00	; 0
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	91 e0       	ldi	r25, 0x01	; 1
     2cc:	cf d0       	rcall	.+414    	; 0x46c <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2d2:	8e 77       	andi	r24, 0x7E	; 126
     2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <EVENT_USB_Device_ControlRequest+0x56>
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     2d6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest>
     2da:	81 3a       	cpi	r24, 0xA1	; 161
     2dc:	d1 f4       	brne	.+52     	; 0x312 <EVENT_USB_Device_ControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
     2de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2e2:	87 7f       	andi	r24, 0xF7	; 247
     2e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
     2e8:	67 e0       	ldi	r22, 0x07	; 7
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	80 e0       	ldi	r24, 0x00	; 0
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	5f d0       	rcall	.+190    	; 0x3b0 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     2f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2f6:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     2f8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     2fc:	08 95       	ret
				Endpoint_ClearIN();
			}
			break;

		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE)) {
     2fe:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest>
     302:	81 32       	cpi	r24, 0x21	; 33
     304:	31 f4       	brne	.+12     	; 0x312 <EVENT_USB_Device_ControlRequest+0x70>
				UEINTX &= ~(1 << RXSTPI);
     306:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     30a:	87 7f       	andi	r24, 0xF7	; 247
     30c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
     310:	7a c1       	rjmp	.+756    	; 0x606 <Endpoint_ClearStatusStage>
				   CONTROL_LINE_OUT_* masks to determine the RTS and DTR line states using the following code:
				   */
			}
			break;
	}
}
     312:	08 95       	ret

00000314 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
     314:	af 92       	push	r10
     316:	bf 92       	push	r11
     318:	cf 92       	push	r12
     31a:	df 92       	push	r13
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
     326:	6c 01       	movw	r12, r24
     328:	eb 01       	movw	r28, r22
     32a:	8a 01       	movw	r16, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
     32c:	8b d1       	rcall	.+790    	; 0x644 <Endpoint_WaitUntilReady>
     32e:	f8 2e       	mov	r15, r24
     330:	81 11       	cpse	r24, r1
     332:	24 c0       	rjmp	.+72     	; 0x37c <Endpoint_Write_Stream_LE+0x68>
	  return ErrorCode;

	if (BytesProcessed != NULL)
     334:	01 15       	cp	r16, r1
     336:	11 05       	cpc	r17, r1
     338:	39 f0       	breq	.+14     	; 0x348 <Endpoint_Write_Stream_LE+0x34>
	{
		Length -= *BytesProcessed;
     33a:	f8 01       	movw	r30, r16
     33c:	80 81       	ld	r24, Z
     33e:	91 81       	ldd	r25, Z+1	; 0x01
     340:	c8 1b       	sub	r28, r24
     342:	d9 0b       	sbc	r29, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
     344:	c8 0e       	add	r12, r24
     346:	d9 1e       	adc	r13, r25
{
     348:	b1 2c       	mov	r11, r1
     34a:	a1 2c       	mov	r10, r1
	}

	while (Length)
     34c:	20 97       	sbiw	r28, 0x00	; 0
     34e:	b1 f0       	breq	.+44     	; 0x37c <Endpoint_Write_Stream_LE+0x68>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     350:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		if (!(Endpoint_IsReadWriteAllowed()))
     354:	85 fd       	sbrc	r24, 5
     356:	22 c0       	rjmp	.+68     	; 0x39c <Endpoint_Write_Stream_LE+0x88>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     358:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     35c:	8e 77       	andi	r24, 0x7E	; 126
     35e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
     362:	1c d4       	rcall	.+2104   	; 0xb9c <USB_USBTask>
			#endif

			if (BytesProcessed != NULL)
     364:	01 15       	cp	r16, r1
     366:	11 05       	cpc	r17, r1
     368:	a1 f0       	breq	.+40     	; 0x392 <Endpoint_Write_Stream_LE+0x7e>
			{
				*BytesProcessed += BytesInTransfer;
     36a:	f8 01       	movw	r30, r16
     36c:	80 81       	ld	r24, Z
     36e:	91 81       	ldd	r25, Z+1	; 0x01
     370:	a8 0e       	add	r10, r24
     372:	b9 1e       	adc	r11, r25
     374:	b1 82       	std	Z+1, r11	; 0x01
     376:	a0 82       	st	Z, r10
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
     378:	85 e0       	ldi	r24, 0x05	; 5
     37a:	f8 2e       	mov	r15, r24
			BytesInTransfer++;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
     37c:	8f 2d       	mov	r24, r15
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	bf 90       	pop	r11
     38e:	af 90       	pop	r10
			if ((ErrorCode = Endpoint_WaitUntilReady()))
     390:	08 95       	ret
     392:	58 d1       	rcall	.+688    	; 0x644 <Endpoint_WaitUntilReady>
     394:	88 23       	and	r24, r24
     396:	d1 f2       	breq	.-76     	; 0x34c <Endpoint_Write_Stream_LE+0x38>
     398:	f8 2e       	mov	r15, r24
     39a:	f0 cf       	rjmp	.-32     	; 0x37c <Endpoint_Write_Stream_LE+0x68>
			TEMPLATE_TRANSFER_BYTE(DataStream);
     39c:	f6 01       	movw	r30, r12
     39e:	81 91       	ld	r24, Z+
     3a0:	6f 01       	movw	r12, r30
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     3a2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			Length--;
     3a6:	21 97       	sbiw	r28, 0x01	; 1
			BytesInTransfer++;
     3a8:	ff ef       	ldi	r31, 0xFF	; 255
     3aa:	af 1a       	sub	r10, r31
     3ac:	bf 0a       	sbc	r11, r31
     3ae:	ce cf       	rjmp	.-100    	; 0x34c <Endpoint_Write_Stream_LE+0x38>

000003b0 <Endpoint_Write_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     3b0:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     3b2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <USB_ControlRequest+0x6>
     3b6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <USB_ControlRequest+0x7>
     3ba:	86 17       	cp	r24, r22
     3bc:	97 07       	cpc	r25, r23
     3be:	a0 f0       	brcs	.+40     	; 0x3e8 <Endpoint_Write_Control_Stream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     3c0:	61 15       	cp	r22, r1
     3c2:	71 05       	cpc	r23, r1
     3c4:	29 f4       	brne	.+10     	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     3c6:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3ca:	9e 77       	andi	r25, 0x7E	; 126
     3cc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     3d0:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     3d2:	61 15       	cp	r22, r1
     3d4:	71 05       	cpc	r23, r1
     3d6:	51 f4       	brne	.+20     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x3c>
     3d8:	91 11       	cpse	r25, r1
     3da:	08 c0       	rjmp	.+16     	; 0x3ec <Endpoint_Write_Control_Stream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     3dc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     3e0:	82 ff       	sbrs	r24, 2
     3e2:	34 c0       	rjmp	.+104    	; 0x44c <__FUSE_REGION_LENGTH__+0x4c>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	08 95       	ret
     3e8:	bc 01       	movw	r22, r24
     3ea:	f2 cf       	rjmp	.-28     	; 0x3d0 <Endpoint_Write_Control_Stream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     3ec:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     3f0:	88 23       	and	r24, r24
     3f2:	c1 f1       	breq	.+112    	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     3f4:	85 30       	cpi	r24, 0x05	; 5
     3f6:	c1 f1       	breq	.+112    	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     3f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     3fc:	83 fd       	sbrc	r24, 3
     3fe:	30 c0       	rjmp	.+96     	; 0x460 <__FUSE_REGION_LENGTH__+0x60>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     400:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     404:	82 fd       	sbrc	r24, 2
     406:	ea cf       	rjmp	.-44     	; 0x3dc <Endpoint_Write_Control_Stream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     408:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     40c:	80 ff       	sbrs	r24, 0
     40e:	e1 cf       	rjmp	.-62     	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     410:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     414:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     418:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     41a:	61 15       	cp	r22, r1
     41c:	71 05       	cpc	r23, r1
     41e:	19 f0       	breq	.+6      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     420:	28 30       	cpi	r18, 0x08	; 8
     422:	31 05       	cpc	r19, r1
     424:	58 f0       	brcs	.+22     	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     426:	91 e0       	ldi	r25, 0x01	; 1
     428:	28 30       	cpi	r18, 0x08	; 8
     42a:	31 05       	cpc	r19, r1
     42c:	09 f0       	breq	.+2      	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
     42e:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     430:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     434:	2e 77       	andi	r18, 0x7E	; 126
     436:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     43a:	cb cf       	rjmp	.-106    	; 0x3d2 <Endpoint_Write_Control_Stream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     43c:	81 91       	ld	r24, Z+
				UEDATX = Data;
     43e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				Length--;
     442:	61 50       	subi	r22, 0x01	; 1
     444:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     446:	2f 5f       	subi	r18, 0xFF	; 255
     448:	3f 4f       	sbci	r19, 0xFF	; 255
     44a:	e7 cf       	rjmp	.-50     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     44c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     450:	88 23       	and	r24, r24
     452:	41 f0       	breq	.+16     	; 0x464 <__FUSE_REGION_LENGTH__+0x64>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     454:	85 30       	cpi	r24, 0x05	; 5
     456:	41 f0       	breq	.+16     	; 0x468 <__FUSE_REGION_LENGTH__+0x68>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     458:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     45c:	83 ff       	sbrs	r24, 3
     45e:	be cf       	rjmp	.-132    	; 0x3dc <Endpoint_Write_Control_Stream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     460:	81 e0       	ldi	r24, 0x01	; 1
}
     462:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     464:	82 e0       	ldi	r24, 0x02	; 2
     466:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     468:	83 e0       	ldi	r24, 0x03	; 3
     46a:	08 95       	ret

0000046c <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
     46c:	fc 01       	movw	r30, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
     46e:	61 15       	cp	r22, r1
     470:	71 05       	cpc	r23, r1
     472:	29 f4       	brne	.+10     	; 0x47e <Endpoint_Read_Control_Stream_LE+0x12>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     474:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     478:	9b 77       	andi	r25, 0x7B	; 123
     47a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	  Endpoint_ClearOUT();

	while (Length)
     47e:	61 15       	cp	r22, r1
     480:	71 05       	cpc	r23, r1
     482:	31 f4       	brne	.+12     	; 0x490 <Endpoint_Read_Control_Stream_LE+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     484:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
     488:	80 ff       	sbrs	r24, 0
     48a:	1e c0       	rjmp	.+60     	; 0x4c8 <Endpoint_Read_Control_Stream_LE+0x5c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
     48c:	80 e0       	ldi	r24, 0x00	; 0
     48e:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     490:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     494:	88 23       	and	r24, r24
     496:	11 f1       	breq	.+68     	; 0x4dc <Endpoint_Read_Control_Stream_LE+0x70>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     498:	85 30       	cpi	r24, 0x05	; 5
     49a:	e1 f0       	breq	.+56     	; 0x4d4 <Endpoint_Read_Control_Stream_LE+0x68>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     49c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     4a0:	83 fd       	sbrc	r24, 3
     4a2:	1a c0       	rjmp	.+52     	; 0x4d8 <Endpoint_Read_Control_Stream_LE+0x6c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     4a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsOUTReceived())
     4a8:	82 ff       	sbrs	r24, 2
     4aa:	e9 cf       	rjmp	.-46     	; 0x47e <Endpoint_Read_Control_Stream_LE+0x12>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     4ac:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     4b0:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     4b4:	38 2f       	mov	r19, r24
			while (Length && Endpoint_BytesInEndpoint())
     4b6:	23 2b       	or	r18, r19
     4b8:	e9 f2       	breq	.-70     	; 0x474 <Endpoint_Read_Control_Stream_LE+0x8>
				return UEDATX;
     4ba:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     4be:	81 93       	st	Z+, r24
				Length--;
     4c0:	61 50       	subi	r22, 0x01	; 1
     4c2:	71 09       	sbc	r23, r1
			while (Length && Endpoint_BytesInEndpoint())
     4c4:	99 f7       	brne	.-26     	; 0x4ac <Endpoint_Read_Control_Stream_LE+0x40>
     4c6:	d6 cf       	rjmp	.-84     	; 0x474 <Endpoint_Read_Control_Stream_LE+0x8>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     4c8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     4cc:	88 23       	and	r24, r24
     4ce:	31 f0       	breq	.+12     	; 0x4dc <Endpoint_Read_Control_Stream_LE+0x70>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     4d0:	85 30       	cpi	r24, 0x05	; 5
     4d2:	c1 f6       	brne	.-80     	; 0x484 <Endpoint_Read_Control_Stream_LE+0x18>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     4d4:	83 e0       	ldi	r24, 0x03	; 3
}
     4d6:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;
     4d8:	81 e0       	ldi	r24, 0x01	; 1
     4da:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     4dc:	82 e0       	ldi	r24, 0x02	; 2
     4de:	08 95       	ret

000004e0 <Endpoint_Write_Control_PStream_LE>:
{
     4e0:	fc 01       	movw	r30, r24
	if (Length > USB_ControlRequest.wLength)
     4e2:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <USB_ControlRequest+0x6>
     4e6:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <USB_ControlRequest+0x7>
     4ea:	86 17       	cp	r24, r22
     4ec:	97 07       	cpc	r25, r23
     4ee:	a0 f0       	brcs	.+40     	; 0x518 <Endpoint_Write_Control_PStream_LE+0x38>
	else if (!(Length))
     4f0:	61 15       	cp	r22, r1
     4f2:	71 05       	cpc	r23, r1
     4f4:	29 f4       	brne	.+10     	; 0x500 <Endpoint_Write_Control_PStream_LE+0x20>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     4f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     4fa:	8e 77       	andi	r24, 0x7E	; 126
     4fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     500:	90 e0       	ldi	r25, 0x00	; 0
	while (Length || LastPacketFull)
     502:	61 15       	cp	r22, r1
     504:	71 05       	cpc	r23, r1
     506:	51 f4       	brne	.+20     	; 0x51c <Endpoint_Write_Control_PStream_LE+0x3c>
     508:	91 11       	cpse	r25, r1
     50a:	08 c0       	rjmp	.+16     	; 0x51c <Endpoint_Write_Control_PStream_LE+0x3c>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     50c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsOUTReceived()))
     510:	82 ff       	sbrs	r24, 2
     512:	35 c0       	rjmp	.+106    	; 0x57e <Endpoint_Write_Control_PStream_LE+0x9e>
	return ENDPOINT_RWCSTREAM_NoError;
     514:	80 e0       	ldi	r24, 0x00	; 0
     516:	08 95       	ret
     518:	bc 01       	movw	r22, r24
     51a:	f2 cf       	rjmp	.-28     	; 0x500 <Endpoint_Write_Control_PStream_LE+0x20>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     51c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     520:	88 23       	and	r24, r24
     522:	c9 f1       	breq	.+114    	; 0x596 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     524:	85 30       	cpi	r24, 0x05	; 5
     526:	c9 f1       	breq	.+114    	; 0x59a <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     528:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     52c:	83 fd       	sbrc	r24, 3
     52e:	31 c0       	rjmp	.+98     	; 0x592 <Endpoint_Write_Control_PStream_LE+0xb2>
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     530:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsOUTReceived())
     534:	82 fd       	sbrc	r24, 2
     536:	ea cf       	rjmp	.-44     	; 0x50c <Endpoint_Write_Control_PStream_LE+0x2c>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     538:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if (Endpoint_IsINReady())
     53c:	80 ff       	sbrs	r24, 0
     53e:	e1 cf       	rjmp	.-62     	; 0x502 <Endpoint_Write_Control_PStream_LE+0x22>
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     540:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
     544:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
     548:	38 2f       	mov	r19, r24
			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     54a:	61 15       	cp	r22, r1
     54c:	71 05       	cpc	r23, r1
     54e:	19 f0       	breq	.+6      	; 0x556 <Endpoint_Write_Control_PStream_LE+0x76>
     550:	28 30       	cpi	r18, 0x08	; 8
     552:	31 05       	cpc	r19, r1
     554:	58 f0       	brcs	.+22     	; 0x56c <Endpoint_Write_Control_PStream_LE+0x8c>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	28 30       	cpi	r18, 0x08	; 8
     55a:	31 05       	cpc	r19, r1
     55c:	09 f0       	breq	.+2      	; 0x560 <Endpoint_Write_Control_PStream_LE+0x80>
     55e:	90 e0       	ldi	r25, 0x00	; 0
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     560:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     564:	8e 77       	andi	r24, 0x7E	; 126
     566:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     56a:	cb cf       	rjmp	.-106    	; 0x502 <Endpoint_Write_Control_PStream_LE+0x22>
				TEMPLATE_TRANSFER_BYTE(DataStream);
     56c:	84 91       	lpm	r24, Z
				UEDATX = Data;
     56e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     572:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     574:	61 50       	subi	r22, 0x01	; 1
     576:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	e6 cf       	rjmp	.-52     	; 0x54a <Endpoint_Write_Control_PStream_LE+0x6a>
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     57e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     582:	88 23       	and	r24, r24
     584:	41 f0       	breq	.+16     	; 0x596 <Endpoint_Write_Control_PStream_LE+0xb6>
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     586:	85 30       	cpi	r24, 0x05	; 5
     588:	41 f0       	breq	.+16     	; 0x59a <Endpoint_Write_Control_PStream_LE+0xba>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     58a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		else if (Endpoint_IsSETUPReceived())
     58e:	83 ff       	sbrs	r24, 3
     590:	bd cf       	rjmp	.-134    	; 0x50c <Endpoint_Write_Control_PStream_LE+0x2c>
		  return ENDPOINT_RWCSTREAM_HostAborted;
     592:	81 e0       	ldi	r24, 0x01	; 1
}
     594:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
     596:	82 e0       	ldi	r24, 0x02	; 2
     598:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_BusSuspended;
     59a:	83 e0       	ldi	r24, 0x03	; 3
     59c:	08 95       	ret

0000059e <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     59e:	98 2f       	mov	r25, r24
     5a0:	97 30       	cpi	r25, 0x07	; 7
     5a2:	28 f0       	brcs	.+10     	; 0x5ae <Endpoint_ConfigureEndpoint_Prv+0x10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5a4:	8f 70       	andi	r24, 0x0F	; 15
     5a6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	08 95       	ret
     5ae:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			UECFG1XTemp = UECFG1XData;
     5b2:	24 2f       	mov	r18, r20
			UECFG0XTemp = UECFG0XData;
     5b4:	76 2f       	mov	r23, r22
			UEIENXTemp  = 0;
     5b6:	50 e0       	ldi	r21, 0x00	; 0
		if (EPNum == Number)
     5b8:	98 17       	cp	r25, r24
     5ba:	31 f0       	breq	.+12     	; 0x5c8 <Endpoint_ConfigureEndpoint_Prv+0x2a>
			UECFG0XTemp = UECFG0X;
     5bc:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
			UECFG1XTemp = UECFG1X;
     5c0:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			UEIENXTemp  = UEIENX;
     5c4:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		if (!(UECFG1XTemp & (1 << ALLOC)))
     5c8:	21 fd       	sbrc	r18, 1
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <Endpoint_ConfigureEndpoint_Prv+0x32>
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     5cc:	9f 5f       	subi	r25, 0xFF	; 255
     5ce:	e8 cf       	rjmp	.-48     	; 0x5a0 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5d0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     5d4:	3e 7f       	andi	r19, 0xFE	; 254
     5d6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG1X &= ~(1 << ALLOC);
     5da:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
     5de:	3d 7f       	andi	r19, 0xFD	; 253
     5e0:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
				UECONX |= (1 << EPEN);
     5e4:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     5e8:	31 60       	ori	r19, 0x01	; 1
     5ea:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = UECFG0XTemp;
     5ee:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = UECFG1XTemp;
     5f2:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX  = UEIENXTemp;
     5f6:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     5fa:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		if (!(Endpoint_IsConfigured()))
     5fe:	27 fd       	sbrc	r18, 7
     600:	e5 cf       	rjmp	.-54     	; 0x5cc <Endpoint_ConfigureEndpoint_Prv+0x2e>
		  return false;
     602:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     604:	08 95       	ret

00000606 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     606:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <USB_ControlRequest>
     60a:	87 ff       	sbrs	r24, 7
     60c:	13 c0       	rjmp	.+38     	; 0x634 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     60e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	{
		while (!(Endpoint_IsOUTReceived()))
     612:	82 ff       	sbrs	r24, 2
     614:	06 c0       	rjmp	.+12     	; 0x622 <Endpoint_ClearStatusStage+0x1c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     616:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     61a:	8b 77       	andi	r24, 0x7B	; 123
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     61c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     620:	04 c0       	rjmp	.+8      	; 0x62a <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     622:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
     626:	81 11       	cpse	r24, r1
     628:	f2 cf       	rjmp	.-28     	; 0x60e <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
     62a:	08 95       	ret
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     62c:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
     630:	88 23       	and	r24, r24
     632:	d9 f3       	breq	.-10     	; 0x62a <Endpoint_ClearStatusStage+0x24>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     634:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		while (!(Endpoint_IsINReady()))
     638:	80 ff       	sbrs	r24, 0
     63a:	f8 cf       	rjmp	.-16     	; 0x62c <Endpoint_ClearStatusStage+0x26>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     63c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     640:	8e 77       	andi	r24, 0x7E	; 126
     642:	ec cf       	rjmp	.-40     	; 0x61c <Endpoint_ClearStatusStage+0x16>

00000644 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     644:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     648:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
     64c:	85 e6       	ldi	r24, 0x65	; 101
     64e:	a9 01       	movw	r20, r18
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     650:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     654:	90 ff       	sbrs	r25, 0
     656:	06 c0       	rjmp	.+12     	; 0x664 <Endpoint_WaitUntilReady+0x20>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     658:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     65c:	90 ff       	sbrs	r25, 0
     65e:	06 c0       	rjmp	.+12     	; 0x66c <Endpoint_WaitUntilReady+0x28>
			  return ENDPOINT_READYWAIT_NoError;
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	08 95       	ret
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     664:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     668:	92 fd       	sbrc	r25, 2
     66a:	fa cf       	rjmp	.-12     	; 0x660 <Endpoint_WaitUntilReady+0x1c>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     66c:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     670:	99 23       	and	r25, r25
     672:	89 f0       	breq	.+34     	; 0x696 <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     674:	95 30       	cpi	r25, 0x05	; 5
     676:	89 f0       	breq	.+34     	; 0x69a <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     678:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     67c:	95 fd       	sbrc	r25, 5
     67e:	0f c0       	rjmp	.+30     	; 0x69e <Endpoint_WaitUntilReady+0x5a>
     680:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
     684:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     688:	42 17       	cp	r20, r18
     68a:	53 07       	cpc	r21, r19
     68c:	09 f3       	breq	.-62     	; 0x650 <Endpoint_WaitUntilReady+0xc>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     68e:	81 50       	subi	r24, 0x01	; 1
     690:	f1 f6       	brne	.-68     	; 0x64e <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
     692:	84 e0       	ldi	r24, 0x04	; 4
     694:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	08 95       	ret
		  return ENDPOINT_READYWAIT_BusSuspended;
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	08 95       	ret
		  return ENDPOINT_READYWAIT_EndpointStalled;
     69e:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
}
     6a0:	08 95       	ret

000006a2 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
     6a2:	0f 93       	push	r16
     6a4:	1f 93       	push	r17
     6a6:	cf 93       	push	r28
     6a8:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     6aa:	4b d0       	rcall	.+150    	; 0x742 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     6ac:	52 d0       	rcall	.+164    	; 0x752 <USB_INT_ClearAllInterrupts>
     6ae:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     6b0:	d0 e0       	ldi	r29, 0x00	; 0
     6b2:	88 81       	ld	r24, Y
     6b4:	8f 77       	andi	r24, 0x7F	; 127
     6b6:	88 83       	st	Y, r24
     6b8:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
     6ba:	80 68       	ori	r24, 0x80	; 128
     6bc:	88 83       	st	Y, r24
     6be:	88 81       	ld	r24, Y
				USBCON &= ~(1 << FRZCLK);
     6c0:	8f 7d       	andi	r24, 0xDF	; 223
     6c2:	88 83       	st	Y, r24
     6c4:	19 bc       	out	0x29, r1	; 41
				PLLCSR = 0;
     6c6:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     6ca:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
     6ce:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     6d2:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     6d6:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     6d8:	10 e0       	ldi	r17, 0x00	; 0
     6da:	f8 01       	movw	r30, r16
     6dc:	80 81       	ld	r24, Z
     6de:	8b 7f       	andi	r24, 0xFB	; 251
     6e0:	80 83       	st	Z, r24
     6e2:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     6e4:	81 60       	ori	r24, 0x01	; 1
     6e6:	88 83       	st	Y, r24
     6e8:	42 e0       	ldi	r20, 0x02	; 2
				return Endpoint_ConfigureEndpoint_Prv(Number,
     6ea:	60 e0       	ldi	r22, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	57 df       	rcall	.-338    	; 0x59e <Endpoint_ConfigureEndpoint_Prv>
     6f0:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	8e 7f       	andi	r24, 0xFE	; 254
     6f8:	80 83       	st	Z, r24
     6fa:	e2 ee       	ldi	r30, 0xE2	; 226
						UDIEN  |= (1 << SUSPE);
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	80 81       	ld	r24, Z
     700:	81 60       	ori	r24, 0x01	; 1
     702:	80 83       	st	Z, r24
     704:	80 81       	ld	r24, Z
						UDIEN  |= (1 << EORSTE);
     706:	88 60       	ori	r24, 0x08	; 8
     708:	80 83       	st	Z, r24
     70a:	f8 01       	movw	r30, r16
				UDCON  &= ~(1 << DETACH);
     70c:	80 81       	ld	r24, Z
     70e:	8e 7f       	andi	r24, 0xFE	; 254
     710:	80 83       	st	Z, r24
     712:	88 81       	ld	r24, Y
				USBCON |=  (1 << OTGPADE);
     714:	80 61       	ori	r24, 0x10	; 16
     716:	88 83       	st	Y, r24
     718:	df 91       	pop	r29
}
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret

00000722 <USB_Init>:
     722:	e8 ed       	ldi	r30, 0xD8	; 216
				USBCON &= ~(1 << OTGPADE);
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	80 81       	ld	r24, Z
     728:	8f 7e       	andi	r24, 0xEF	; 239
     72a:	80 83       	st	Z, r24
				UHWCON |=  (1 << UVREGE);
     72c:	e7 ed       	ldi	r30, 0xD7	; 215
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	80 81       	ld	r24, Z
     732:	81 60       	ori	r24, 0x01	; 1
     734:	80 83       	st	Z, r24
		PLLFRQ = (1 << PDIV2);
     736:	84 e0       	ldi	r24, 0x04	; 4
     738:	82 bf       	out	0x32, r24	; 50
	USB_IsInitialized = true;
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <USB_IsInitialized>
	USB_ResetInterface();
     740:	b0 cf       	rjmp	.-160    	; 0x6a2 <USB_ResetInterface>

00000742 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     742:	e8 ed       	ldi	r30, 0xD8	; 216
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	80 81       	ld	r24, Z
     748:	8e 7f       	andi	r24, 0xFE	; 254
     74a:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     74c:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	#endif
}
     750:	08 95       	ret

00000752 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     752:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     756:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#endif
}
     75a:	08 95       	ret

0000075c <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	2f 93       	push	r18
     768:	3f 93       	push	r19
     76a:	4f 93       	push	r20
     76c:	5f 93       	push	r21
     76e:	6f 93       	push	r22
     770:	7f 93       	push	r23
     772:	8f 93       	push	r24
     774:	9f 93       	push	r25
     776:	af 93       	push	r26
     778:	bf 93       	push	r27
     77a:	ef 93       	push	r30
     77c:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     77e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     782:	82 ff       	sbrs	r24, 2
     784:	0a c0       	rjmp	.+20     	; 0x79a <__vector_10+0x3e>
						return (UDIEN  & (1 << SOFE));
     786:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     78a:	82 ff       	sbrs	r24, 2
     78c:	06 c0       	rjmp	.+12     	; 0x79a <__vector_10+0x3e>
						UDINT  &= ~(1 << SOFI);
     78e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     792:	8b 7f       	andi	r24, 0xFB	; 251
     794:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     798:	00 d2       	rcall	.+1024   	; 0xb9a <USB_Event_Stub>
						return (USBINT & (1 << VBUSTI));
     79a:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     79e:	80 ff       	sbrs	r24, 0
     7a0:	17 c0       	rjmp	.+46     	; 0x7d0 <__vector_10+0x74>
						return (USBCON & (1 << VBUSTE));
     7a2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     7a6:	80 ff       	sbrs	r24, 0
     7a8:	13 c0       	rjmp	.+38     	; 0x7d0 <__vector_10+0x74>
						USBINT &= ~(1 << VBUSTI);
     7aa:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
     7ae:	8e 7f       	andi	r24, 0xFE	; 254
     7b0:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7e00da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     7b4:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7e00d9>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     7b8:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     7ba:	80 ff       	sbrs	r24, 0
     7bc:	87 c0       	rjmp	.+270    	; 0x8cc <__vector_10+0x170>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     7be:	82 e0       	ldi	r24, 0x02	; 2
     7c0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     7c2:	09 b4       	in	r0, 0x29	; 41
     7c4:	00 fe       	sbrs	r0, 0
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>
			EVENT_USB_Device_Connect();
     7ce:	52 dd       	rcall	.-1372   	; 0x274 <EVENT_USB_Device_Connect>
						return (UDINT  & (1 << SUSPI));
     7d0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     7d4:	80 ff       	sbrs	r24, 0
     7d6:	18 c0       	rjmp	.+48     	; 0x808 <__vector_10+0xac>
						return (UDIEN  & (1 << SUSPE));
     7d8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     7dc:	80 ff       	sbrs	r24, 0
     7de:	14 c0       	rjmp	.+40     	; 0x808 <__vector_10+0xac>
						UDIEN  &= ~(1 << SUSPE);
     7e0:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     7e4:	8e 7f       	andi	r24, 0xFE	; 254
     7e6:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     7ea:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     7ee:	80 61       	ori	r24, 0x10	; 16
     7f0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     7f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     7f8:	80 62       	ori	r24, 0x20	; 32
     7fa:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
				PLLCSR = 0;
     7fe:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     800:	85 e0       	ldi	r24, 0x05	; 5
     802:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>
		EVENT_USB_Device_Suspend();
     806:	c9 d1       	rcall	.+914    	; 0xb9a <USB_Event_Stub>
						return (UDINT  & (1 << WAKEUPI));
     808:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     80c:	84 ff       	sbrs	r24, 4
     80e:	27 c0       	rjmp	.+78     	; 0x85e <__vector_10+0x102>
						return (UDIEN  & (1 << WAKEUPE));
     810:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     814:	84 ff       	sbrs	r24, 4
     816:	23 c0       	rjmp	.+70     	; 0x85e <__vector_10+0x102>
				PLLCSR = USB_PLL_PSC;
     818:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     81a:	82 e0       	ldi	r24, 0x02	; 2
     81c:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     81e:	09 b4       	in	r0, 0x29	; 41
     820:	00 fe       	sbrs	r0, 0
     822:	fd cf       	rjmp	.-6      	; 0x81e <__vector_10+0xc2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     824:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     828:	8f 7d       	andi	r24, 0xDF	; 223
     82a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
						UDINT  &= ~(1 << WAKEUPI);
     82e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     832:	8f 7e       	andi	r24, 0xEF	; 239
     834:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << WAKEUPE);
     838:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     83c:	8f 7e       	andi	r24, 0xEF	; 239
     83e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << SUSPE);
     842:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     846:	81 60       	ori	r24, 0x01	; 1
     848:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     84c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_Device_ConfigurationNumber>
     850:	88 23       	and	r24, r24
     852:	09 f4       	brne	.+2      	; 0x856 <__vector_10+0xfa>
     854:	3f c0       	rjmp	.+126    	; 0x8d4 <__vector_10+0x178>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     856:	84 e0       	ldi	r24, 0x04	; 4
     858:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     85c:	9e d1       	rcall	.+828    	; 0xb9a <USB_Event_Stub>
						return (UDINT  & (1 << EORSTI));
     85e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     862:	83 ff       	sbrs	r24, 3
     864:	22 c0       	rjmp	.+68     	; 0x8aa <__vector_10+0x14e>
						return (UDIEN  & (1 << EORSTE));
     866:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     86a:	83 ff       	sbrs	r24, 3
     86c:	1e c0       	rjmp	.+60     	; 0x8aa <__vector_10+0x14e>
						UDINT  &= ~(1 << EORSTI);
     86e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     872:	87 7f       	andi	r24, 0xF7	; 247
     874:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     878:	82 e0       	ldi	r24, 0x02	; 2
     87a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
     87e:	10 92 48 02 	sts	0x0248, r1	; 0x800248 <USB_Device_ConfigurationNumber>
						UDINT  &= ~(1 << SUSPI);
     882:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
     886:	8e 7f       	andi	r24, 0xFE	; 254
     888:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
						UDIEN  &= ~(1 << SUSPE);
     88c:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     890:	8e 7f       	andi	r24, 0xFE	; 254
     892:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
						UDIEN  |= (1 << WAKEUPE);
     896:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
     89a:	80 61       	ori	r24, 0x10	; 16
     89c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
     8a0:	42 e0       	ldi	r20, 0x02	; 2
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	80 e0       	ldi	r24, 0x00	; 0

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     8a6:	7b de       	rcall	.-778    	; 0x59e <Endpoint_ConfigureEndpoint_Prv>
     8a8:	78 d1       	rcall	.+752    	; 0xb9a <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     8aa:	ff 91       	pop	r31
     8ac:	ef 91       	pop	r30
     8ae:	bf 91       	pop	r27
     8b0:	af 91       	pop	r26
     8b2:	9f 91       	pop	r25
     8b4:	8f 91       	pop	r24
     8b6:	7f 91       	pop	r23
     8b8:	6f 91       	pop	r22
     8ba:	5f 91       	pop	r21
     8bc:	4f 91       	pop	r20
     8be:	3f 91       	pop	r19
     8c0:	2f 91       	pop	r18
     8c2:	0f 90       	pop	r0
     8c4:	0f be       	out	0x3f, r0	; 63
     8c6:	0f 90       	pop	r0
     8c8:	1f 90       	pop	r1
			USB_DeviceState = DEVICE_STATE_Unattached;
     8ca:	18 95       	reti
     8cc:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
     8d0:	d2 dc       	rcall	.-1628   	; 0x276 <EVENT_USB_Device_Disconnect>
     8d2:	7e cf       	rjmp	.-260    	; 0x7d0 <__vector_10+0x74>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     8d4:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
     8d8:	87 fd       	sbrc	r24, 7
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__vector_10+0x184>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	bc cf       	rjmp	.-136    	; 0x858 <__vector_10+0xfc>
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	ba cf       	rjmp	.-140    	; 0x858 <__vector_10+0xfc>

000008e4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     8e4:	1f 93       	push	r17
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	aa 97       	sbiw	r28, 0x2a	; 42
     8f0:	0f b6       	in	r0, 0x3f	; 63
     8f2:	f8 94       	cli
     8f4:	de bf       	out	0x3e, r29	; 62
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	cd bf       	out	0x3d, r28	; 61
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
     8fa:	8d e4       	ldi	r24, 0x4D	; 77
     8fc:	92 e0       	ldi	r25, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     8fe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     902:	fc 01       	movw	r30, r24
     904:	21 93       	st	Z+, r18
     906:	cf 01       	movw	r24, r30
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     908:	f2 e0       	ldi	r31, 0x02	; 2
     90a:	85 35       	cpi	r24, 0x55	; 85
     90c:	9f 07       	cpc	r25, r31
     90e:	b9 f7       	brne	.-18     	; 0x8fe <USB_Device_ProcessControlRequest+0x1a>
	#endif

	EVENT_USB_Device_ControlRequest();
     910:	c8 dc       	rcall	.-1648   	; 0x2a2 <EVENT_USB_Device_ControlRequest>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     912:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	if (Endpoint_IsSETUPReceived())
     916:	83 ff       	sbrs	r24, 3
     918:	11 c0       	rjmp	.+34     	; 0x93c <USB_Device_ProcessControlRequest+0x58>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     91a:	90 91 4d 02 	lds	r25, 0x024D	; 0x80024d <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
     91e:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <USB_ControlRequest+0x1>
     922:	85 30       	cpi	r24, 0x05	; 5
     924:	09 f4       	brne	.+2      	; 0x928 <USB_Device_ProcessControlRequest+0x44>
     926:	c3 c0       	rjmp	.+390    	; 0xaae <USB_Device_ProcessControlRequest+0x1ca>
     928:	08 f5       	brcc	.+66     	; 0x96c <USB_Device_ProcessControlRequest+0x88>
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	09 f4       	brne	.+2      	; 0x930 <USB_Device_ProcessControlRequest+0x4c>
     92e:	8c c0       	rjmp	.+280    	; 0xa48 <USB_Device_ProcessControlRequest+0x164>
     930:	88 23       	and	r24, r24
     932:	09 f4       	brne	.+2      	; 0x936 <USB_Device_ProcessControlRequest+0x52>
     934:	61 c0       	rjmp	.+194    	; 0x9f8 <USB_Device_ProcessControlRequest+0x114>
     936:	83 30       	cpi	r24, 0x03	; 3
     938:	09 f4       	brne	.+2      	; 0x93c <USB_Device_ProcessControlRequest+0x58>
     93a:	86 c0       	rjmp	.+268    	; 0xa48 <USB_Device_ProcessControlRequest+0x164>
     93c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     940:	83 ff       	sbrs	r24, 3
     942:	0a c0       	rjmp	.+20     	; 0x958 <USB_Device_ProcessControlRequest+0x74>
				UEINTX &= ~(1 << RXSTPI);
     944:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     948:	87 7f       	andi	r24, 0xF7	; 247
     94a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				UECONX |= (1 << STALLRQ);
     94e:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     952:	80 62       	ori	r24, 0x20	; 32
     954:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
     958:	aa 96       	adiw	r28, 0x2a	; 42
     95a:	0f b6       	in	r0, 0x3f	; 63
     95c:	f8 94       	cli
     95e:	de bf       	out	0x3e, r29	; 62
     960:	0f be       	out	0x3f, r0	; 63
     962:	cd bf       	out	0x3d, r28	; 61
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	08 95       	ret
     96c:	88 30       	cpi	r24, 0x08	; 8
     96e:	09 f4       	brne	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0x8e>
     970:	d5 c0       	rjmp	.+426    	; 0xb1c <__stack+0x1d>
     972:	89 30       	cpi	r24, 0x09	; 9
     974:	09 f4       	brne	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0x94>
     976:	df c0       	rjmp	.+446    	; 0xb36 <__stack+0x37>
     978:	86 30       	cpi	r24, 0x06	; 6
     97a:	01 f7       	brne	.-64     	; 0x93c <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     97c:	90 58       	subi	r25, 0x80	; 128
     97e:	92 30       	cpi	r25, 0x02	; 2
     980:	e8 f6       	brcc	.-70     	; 0x93c <USB_Device_ProcessControlRequest+0x58>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     982:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <USB_ControlRequest+0x2>
     986:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <USB_ControlRequest+0x3>
     98a:	8c 3d       	cpi	r24, 0xDC	; 220
     98c:	23 e0       	ldi	r18, 0x03	; 3
     98e:	92 07       	cpc	r25, r18
     990:	09 f0       	breq	.+2      	; 0x994 <USB_Device_ProcessControlRequest+0xb0>
     992:	af c0       	rjmp	.+350    	; 0xaf2 <USB_Device_ProcessControlRequest+0x20e>
	SignatureDescriptor.Header.Type = DTYPE_String;
     994:	83 e0       	ldi	r24, 0x03	; 3
     996:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     998:	8a e2       	ldi	r24, 0x2A	; 42
     99a:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     99c:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     99e:	f8 94       	cli
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     9a0:	de 01       	movw	r26, r28
     9a2:	13 96       	adiw	r26, 0x03	; 3
     9a4:	20 e0       	ldi	r18, 0x00	; 0
				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
     9a6:	3e e0       	ldi	r19, 0x0E	; 14
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     9a8:	51 e2       	ldi	r21, 0x21	; 33
     9aa:	e3 2f       	mov	r30, r19
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
     9b2:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
     9b4:	20 ff       	sbrs	r18, 0
     9b6:	03 c0       	rjmp	.+6      	; 0x9be <USB_Device_ProcessControlRequest+0xda>
					{
						SerialByte >>= 4;
     9b8:	e2 95       	swap	r30
     9ba:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
     9bc:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     9be:	ef 70       	andi	r30, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     9c0:	8e 2f       	mov	r24, r30
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	ea 30       	cpi	r30, 0x0A	; 10
     9c6:	08 f4       	brcc	.+2      	; 0x9ca <USB_Device_ProcessControlRequest+0xe6>
     9c8:	92 c0       	rjmp	.+292    	; 0xaee <USB_Device_ProcessControlRequest+0x20a>
     9ca:	c7 96       	adiw	r24, 0x37	; 55
     9cc:	8d 93       	st	X+, r24
     9ce:	9d 93       	st	X+, r25
				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     9d0:	2f 5f       	subi	r18, 0xFF	; 255
     9d2:	24 31       	cpi	r18, 0x14	; 20
     9d4:	51 f7       	brne	.-44     	; 0x9aa <USB_Device_ProcessControlRequest+0xc6>
				SREG = GlobalIntState;
     9d6:	4f bf       	out	0x3f, r20	; 63
				UEINTX &= ~(1 << RXSTPI);
     9d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9dc:	87 7f       	andi	r24, 0xF7	; 247
     9de:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     9e2:	6a e2       	ldi	r22, 0x2A	; 42
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	e2 dc       	rcall	.-1596   	; 0x3b0 <Endpoint_Write_Control_Stream_LE>
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     9ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f0:	8b 77       	andi	r24, 0x7B	; 123
     9f2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     9f6:	a2 cf       	rjmp	.-188    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     9f8:	90 38       	cpi	r25, 0x80	; 128
     9fa:	99 f0       	breq	.+38     	; 0xa22 <USB_Device_ProcessControlRequest+0x13e>
     9fc:	92 38       	cpi	r25, 0x82	; 130
     9fe:	09 f0       	breq	.+2      	; 0xa02 <USB_Device_ProcessControlRequest+0x11e>
     a00:	9d cf       	rjmp	.-198    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a02:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <USB_ControlRequest+0x4>
     a06:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a08:	87 30       	cpi	r24, 0x07	; 7
     a0a:	08 f0       	brcs	.+2      	; 0xa0e <USB_Device_ProcessControlRequest+0x12a>
     a0c:	97 cf       	rjmp	.-210    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a0e:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     a12:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a16:	85 fb       	bst	r24, 5
     a18:	88 27       	eor	r24, r24
     a1a:	80 f9       	bld	r24, 0
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a1c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     a20:	06 c0       	rjmp	.+12     	; 0xa2e <USB_Device_ProcessControlRequest+0x14a>
	uint8_t CurrentStatus = 0;
     a22:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <USB_Device_CurrentlySelfPowered>
			if (USB_Device_RemoteWakeupEnabled)
     a26:	90 91 4a 02 	lds	r25, 0x024A	; 0x80024a <USB_Device_RemoteWakeupEnabled>
     a2a:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     a2c:	82 60       	ori	r24, 0x02	; 2
				UEINTX &= ~(1 << RXSTPI);
     a2e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a32:	97 7f       	andi	r25, 0xF7	; 247
     a34:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     a38:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
				UEDATX = (Data >> 8);
     a3c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a40:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     a44:	8e 77       	andi	r24, 0x7E	; 126
     a46:	a5 c0       	rjmp	.+330    	; 0xb92 <__stack+0x93>
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     a48:	99 23       	and	r25, r25
     a4a:	09 f4       	brne	.+2      	; 0xa4e <USB_Device_ProcessControlRequest+0x16a>
     a4c:	92 c0       	rjmp	.+292    	; 0xb72 <__stack+0x73>
     a4e:	92 30       	cpi	r25, 0x02	; 2
     a50:	09 f0       	breq	.+2      	; 0xa54 <USB_Device_ProcessControlRequest+0x170>
     a52:	74 cf       	rjmp	.-280    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     a54:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <USB_ControlRequest+0x2>
     a58:	91 11       	cpse	r25, r1
     a5a:	96 c0       	rjmp	.+300    	; 0xb88 <__stack+0x89>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     a5c:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <USB_ControlRequest+0x4>
     a60:	9f 70       	andi	r25, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
     a62:	2f ef       	ldi	r18, 0xFF	; 255
     a64:	29 0f       	add	r18, r25
     a66:	26 30       	cpi	r18, 0x06	; 6
     a68:	08 f0       	brcs	.+2      	; 0xa6c <USB_Device_ProcessControlRequest+0x188>
     a6a:	68 cf       	rjmp	.-304    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     a6c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UECONX & (1 << EPEN)) ? true : false);
     a70:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     a74:	20 ff       	sbrs	r18, 0
     a76:	88 c0       	rjmp	.+272    	; 0xb88 <__stack+0x89>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     a78:	83 30       	cpi	r24, 0x03	; 3
     a7a:	31 f4       	brne	.+12     	; 0xa88 <USB_Device_ProcessControlRequest+0x1a4>
				UECONX |= (1 << STALLRQ);
     a7c:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a80:	80 62       	ori	r24, 0x20	; 32
				UECONX |= (1 << RSTDT);
     a82:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a86:	80 c0       	rjmp	.+256    	; 0xb88 <__stack+0x89>
				UECONX |= (1 << STALLRQC);
     a88:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     a8c:	80 61       	ori	r24, 0x10	; 16
     a8e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     a92:	21 e0       	ldi	r18, 0x01	; 1
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	01 c0       	rjmp	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x1b6>
     a98:	22 0f       	add	r18, r18
     a9a:	9a 95       	dec	r25
     a9c:	ea f7       	brpl	.-6      	; 0xa98 <USB_Device_ProcessControlRequest+0x1b4>
     a9e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UERST = 0;
     aa2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
				UECONX |= (1 << RSTDT);
     aa6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
     aaa:	88 60       	ori	r24, 0x08	; 8
     aac:	ea cf       	rjmp	.-44     	; 0xa82 <USB_Device_ProcessControlRequest+0x19e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     aae:	91 11       	cpse	r25, r1
     ab0:	45 cf       	rjmp	.-374    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
     ab2:	10 91 4f 02 	lds	r17, 0x024F	; 0x80024f <USB_ControlRequest+0x2>
     ab6:	1f 77       	andi	r17, 0x7F	; 127
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     ab8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     abc:	80 78       	andi	r24, 0x80	; 128
     abe:	81 2b       	or	r24, r17
     ac0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
				UEINTX &= ~(1 << RXSTPI);
     ac4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     ac8:	87 7f       	andi	r24, 0xF7	; 247
     aca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_ClearStatusStage();
     ace:	9b dd       	rcall	.-1226   	; 0x606 <Endpoint_ClearStatusStage>
				return ((UEINTX & (1 << TXINI)) ? true : false);
     ad0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	while (!(Endpoint_IsINReady()));
     ad4:	80 ff       	sbrs	r24, 0
     ad6:	fc cf       	rjmp	.-8      	; 0xad0 <USB_Device_ProcessControlRequest+0x1ec>
				UDADDR |= (1 << ADDEN);
     ad8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     adc:	80 68       	ori	r24, 0x80	; 128
     ade:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     ae2:	82 e0       	ldi	r24, 0x02	; 2
     ae4:	11 11       	cpse	r17, r1
     ae6:	83 e0       	ldi	r24, 0x03	; 3
     ae8:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>
     aec:	27 cf       	rjmp	.-434    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     aee:	c0 96       	adiw	r24, 0x30	; 48
     af0:	6d cf       	rjmp	.-294    	; 0x9cc <USB_Device_ProcessControlRequest+0xe8>
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     af2:	60 91 51 02 	lds	r22, 0x0251	; 0x800251 <USB_ControlRequest+0x4>
     af6:	70 91 52 02 	lds	r23, 0x0252	; 0x800252 <USB_ControlRequest+0x5>
     afa:	ae 01       	movw	r20, r28
     afc:	4f 5f       	subi	r20, 0xFF	; 255
     afe:	5f 4f       	sbci	r21, 0xFF	; 255
     b00:	68 d0       	rcall	.+208    	; 0xbd2 <CALLBACK_USB_GetDescriptor>
     b02:	bc 01       	movw	r22, r24
     b04:	89 2b       	or	r24, r25
     b06:	09 f4       	brne	.+2      	; 0xb0a <__stack+0xb>
     b08:	19 cf       	rjmp	.-462    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
     b0a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b0e:	97 7f       	andi	r25, 0xF7	; 247
     b10:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     b14:	89 81       	ldd	r24, Y+1	; 0x01
     b16:	9a 81       	ldd	r25, Y+2	; 0x02
     b18:	e3 dc       	rcall	.-1594   	; 0x4e0 <Endpoint_Write_Control_PStream_LE>
     b1a:	68 cf       	rjmp	.-304    	; 0x9ec <USB_Device_ProcessControlRequest+0x108>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     b1c:	90 38       	cpi	r25, 0x80	; 128
     b1e:	09 f0       	breq	.+2      	; 0xb22 <__stack+0x23>
     b20:	0d cf       	rjmp	.-486    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
     b22:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b26:	87 7f       	andi	r24, 0xF7	; 247
     b28:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     b2c:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_Device_ConfigurationNumber>
				UEDATX = Data;
     b30:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
     b34:	85 cf       	rjmp	.-246    	; 0xa40 <USB_Device_ProcessControlRequest+0x15c>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     b36:	91 11       	cpse	r25, r1
     b38:	01 cf       	rjmp	.-510    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     b3a:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <USB_ControlRequest+0x2>
     b3e:	92 30       	cpi	r25, 0x02	; 2
     b40:	08 f0       	brcs	.+2      	; 0xb44 <__stack+0x45>
     b42:	fc ce       	rjmp	.-520    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
				UEINTX &= ~(1 << RXSTPI);
     b44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b48:	87 7f       	andi	r24, 0xF7	; 247
     b4a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     b4e:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <USB_Device_ConfigurationNumber>
	Endpoint_ClearStatusStage();
     b52:	59 dd       	rcall	.-1358   	; 0x606 <Endpoint_ClearStatusStage>
	if (USB_Device_ConfigurationNumber)
     b54:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <USB_Device_ConfigurationNumber>
     b58:	88 23       	and	r24, r24
     b5a:	11 f0       	breq	.+4      	; 0xb60 <__stack+0x61>
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     b5c:	84 e0       	ldi	r24, 0x04	; 4
     b5e:	05 c0       	rjmp	.+10     	; 0xb6a <__stack+0x6b>
				return (UDADDR & (1 << ADDEN));
     b60:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
     b64:	87 fd       	sbrc	r24, 7
     b66:	fa cf       	rjmp	.-12     	; 0xb5c <__stack+0x5d>
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <USB_DeviceState>
	EVENT_USB_Device_ConfigurationChanged();
     b6e:	84 db       	rcall	.-2296   	; 0x278 <EVENT_USB_Device_ConfigurationChanged>
     b70:	e5 ce       	rjmp	.-566    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     b72:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <USB_ControlRequest+0x2>
     b76:	91 30       	cpi	r25, 0x01	; 1
     b78:	09 f0       	breq	.+2      	; 0xb7c <__stack+0x7d>
     b7a:	e0 ce       	rjmp	.-576    	; 0x93c <USB_Device_ProcessControlRequest+0x58>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     b7c:	91 e0       	ldi	r25, 0x01	; 1
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	09 f0       	breq	.+2      	; 0xb84 <__stack+0x85>
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <USB_Device_RemoteWakeupEnabled>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     b88:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				UEINTX &= ~(1 << RXSTPI);
     b8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
     b90:	87 7f       	andi	r24, 0xF7	; 247
     b92:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     b96:	37 dd       	rcall	.-1426   	; 0x606 <Endpoint_ClearStatusStage>
     b98:	d1 ce       	rjmp	.-606    	; 0x93c <USB_Device_ProcessControlRequest+0x58>

00000b9a <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
     b9a:	08 95       	ret

00000b9c <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     b9c:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
     b9e:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <USB_DeviceState>
     ba2:	88 23       	and	r24, r24
     ba4:	91 f0       	breq	.+36     	; 0xbca <USB_USBTask+0x2e>
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     ba6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
     baa:	cf 70       	andi	r28, 0x0F	; 15
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bac:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
     bb0:	80 fd       	sbrc	r24, 0
     bb2:	0d c0       	rjmp	.+26     	; 0xbce <USB_USBTask+0x32>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     bb6:	c8 2b       	or	r28, r24
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bb8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bbc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
     bc0:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
     bc2:	90 de       	rcall	.-736    	; 0x8e4 <USB_Device_ProcessControlRequest>
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     bc4:	cf 70       	andi	r28, 0x0F	; 15
     bc6:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
}
     bca:	cf 91       	pop	r28
     bcc:	08 95       	ret
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     bce:	80 e8       	ldi	r24, 0x80	; 128
     bd0:	f2 cf       	rjmp	.-28     	; 0xbb6 <USB_USBTask+0x1a>

00000bd2 <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint16_t wIndex,
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
     bd2:	29 2f       	mov	r18, r25
     bd4:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     bd6:	22 30       	cpi	r18, 0x02	; 2
     bd8:	31 05       	cpc	r19, r1
     bda:	11 f1       	breq	.+68     	; 0xc20 <CALLBACK_USB_GetDescriptor+0x4e>
     bdc:	23 30       	cpi	r18, 0x03	; 3
     bde:	31 05       	cpc	r19, r1
     be0:	59 f0       	breq	.+22     	; 0xbf8 <CALLBACK_USB_GetDescriptor+0x26>
     be2:	21 30       	cpi	r18, 0x01	; 1
     be4:	31 05       	cpc	r19, r1
     be6:	09 f1       	breq	.+66     	; 0xc2a <CALLBACK_USB_GetDescriptor+0x58>
	uint16_t    Size    = NO_DESCRIPTOR;
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
	const void* Address = NULL;
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	20 e0       	ldi	r18, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     bf0:	fa 01       	movw	r30, r20
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
	return Size;
}
     bf6:	08 95       	ret
			switch (DescriptorNumber)
     bf8:	99 27       	eor	r25, r25
     bfa:	81 30       	cpi	r24, 0x01	; 1
     bfc:	91 05       	cpc	r25, r1
     bfe:	69 f0       	breq	.+26     	; 0xc1a <CALLBACK_USB_GetDescriptor+0x48>
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	29 f0       	breq	.+10     	; 0xc0e <CALLBACK_USB_GetDescriptor+0x3c>
     c04:	02 97       	sbiw	r24, 0x02	; 2
     c06:	81 f7       	brne	.-32     	; 0xbe8 <CALLBACK_USB_GetDescriptor+0x16>
					Size    = pgm_read_byte(&ProductString.Header.Size);
     c08:	ec ea       	ldi	r30, 0xAC	; 172
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	02 c0       	rjmp	.+4      	; 0xc12 <CALLBACK_USB_GetDescriptor+0x40>
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     c0e:	e4 ee       	ldi	r30, 0xE4	; 228
     c10:	f0 e0       	ldi	r31, 0x00	; 0
					Size    = pgm_read_byte(&ProductString.Header.Size);
     c12:	84 91       	lpm	r24, Z
     c14:	90 e0       	ldi	r25, 0x00	; 0
					Address = &ProductString;
     c16:	9f 01       	movw	r18, r30
					break;
     c18:	eb cf       	rjmp	.-42     	; 0xbf0 <CALLBACK_USB_GetDescriptor+0x1e>
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     c1a:	ea ec       	ldi	r30, 0xCA	; 202
     c1c:	f0 e0       	ldi	r31, 0x00	; 0
     c1e:	f9 cf       	rjmp	.-14     	; 0xc12 <CALLBACK_USB_GetDescriptor+0x40>
			Size    = sizeof(USB_Descriptor_Configuration_t);
     c20:	8e e3       	ldi	r24, 0x3E	; 62
     c22:	90 e0       	ldi	r25, 0x00	; 0
			Address = &ConfigurationDescriptor;
     c24:	28 ee       	ldi	r18, 0xE8	; 232
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	e3 cf       	rjmp	.-58     	; 0xbf0 <CALLBACK_USB_GetDescriptor+0x1e>
			Size    = sizeof(USB_Descriptor_Device_t);
     c2a:	82 e1       	ldi	r24, 0x12	; 18
     c2c:	90 e0       	ldi	r25, 0x00	; 0
			Address = &DeviceDescriptor;
     c2e:	26 e2       	ldi	r18, 0x26	; 38
     c30:	31 e0       	ldi	r19, 0x01	; 1
     c32:	de cf       	rjmp	.-68     	; 0xbf0 <CALLBACK_USB_GetDescriptor+0x1e>

00000c34 <bt_init>:
#include <stddef.h>
#include <avr/io.h>
#include <util/delay.h>
#include <string.h>

void bt_init(void) {
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	spi_init();
     c48:	4c d0       	rcall	.+152    	; 0xce2 <spi_init>

	// Line reset
	DDRD |= 0x10; // Set reset pin as output
     c4a:	54 9a       	sbi	0x0a, 4	; 10
	PORTD |= 0x10; // Ensure that reset is kept high
     c4c:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~0x10; // Negate reset line for 10ms
     c4e:	5c 98       	cbi	0x0b, 4	; 11
     c50:	8f e1       	ldi	r24, 0x1F	; 31
     c52:	9e e4       	ldi	r25, 0x4E	; 78
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <bt_init+0x20>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <bt_init+0x26>
     c5a:	00 00       	nop
	_delay_ms(10);
	PORTD |= 0x10; // Reset kept low, go back high
     c5c:	5c 9a       	sbi	0x0b, 4	; 11

	struct sdep_packet_s packet;
	packet.type = SDEP_MESSAGE_TYPE_COMMAND;
     c5e:	80 e1       	ldi	r24, 0x10	; 16
     c60:	89 83       	std	Y+1, r24	; 0x01
	packet.id_high = 0xBE;
     c62:	8e eb       	ldi	r24, 0xBE	; 190
     c64:	8a 83       	std	Y+2, r24	; 0x02
	packet.id_low = 0xEF;
     c66:	8f ee       	ldi	r24, 0xEF	; 239
     c68:	8b 83       	std	Y+3, r24	; 0x03
	packet.size = 0x00;
     c6a:	1c 82       	std	Y+4, r1	; 0x04

	sdep_send(&packet, NULL);
     c6c:	70 e0       	ldi	r23, 0x00	; 0
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	ce 01       	movw	r24, r28
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	53 d0       	rcall	.+166    	; 0xd1c <sdep_send>
}
     c76:	64 96       	adiw	r28, 0x14	; 20
     c78:	0f b6       	in	r0, 0x3f	; 63
     c7a:	f8 94       	cli
     c7c:	de bf       	out	0x3e, r29	; 62
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	cd bf       	out	0x3d, r28	; 61
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <bt_connected>:

u8 bt_connected(void) {
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	cd b7       	in	r28, 0x3d	; 61
     c8e:	de b7       	in	r29, 0x3e	; 62
     c90:	a8 97       	sbiw	r28, 0x28	; 40
     c92:	0f b6       	in	r0, 0x3f	; 63
     c94:	f8 94       	cli
     c96:	de bf       	out	0x3e, r29	; 62
     c98:	0f be       	out	0x3f, r0	; 63
     c9a:	cd bf       	out	0x3d, r28	; 61
	struct sdep_packet_s packet;
	packet.type = SDEP_MESSAGE_TYPE_COMMAND;
     c9c:	80 e1       	ldi	r24, 0x10	; 16
     c9e:	8d 8b       	std	Y+21, r24	; 0x15
	packet.id_high = 0xA0;
     ca0:	80 ea       	ldi	r24, 0xA0	; 160
     ca2:	8e 8b       	std	Y+22, r24	; 0x16
	packet.id_low = 0x00;
     ca4:	1f 8a       	std	Y+23, r1	; 0x17
	packet.size = 0x0D;
     ca6:	8d e0       	ldi	r24, 0x0D	; 13
     ca8:	88 8f       	std	Y+24, r24	; 0x18

	char* cmd = "AT+GAPGETCONN";
	memcpy(&packet.data, cmd, strlen(cmd));
     caa:	ef e0       	ldi	r30, 0x0F	; 15
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	de 01       	movw	r26, r28
     cb0:	59 96       	adiw	r26, 0x19	; 25
     cb2:	01 90       	ld	r0, Z+
     cb4:	0d 92       	st	X+, r0
     cb6:	8a 95       	dec	r24
     cb8:	e1 f7       	brne	.-8      	; 0xcb2 <bt_connected+0x2a>

	struct sdep_packet_s response;

	sdep_send(&packet, &response);
     cba:	be 01       	movw	r22, r28
     cbc:	6f 5f       	subi	r22, 0xFF	; 255
     cbe:	7f 4f       	sbci	r23, 0xFF	; 255
     cc0:	ce 01       	movw	r24, r28
     cc2:	45 96       	adiw	r24, 0x15	; 21
     cc4:	2b d0       	rcall	.+86     	; 0xd1c <sdep_send>

	return response.data[0] == '0' ? 0 : 1;
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	9d 81       	ldd	r25, Y+5	; 0x05
     cca:	90 33       	cpi	r25, 0x30	; 48
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <bt_connected+0x48>
     cce:	80 e0       	ldi	r24, 0x00	; 0
}
     cd0:	a8 96       	adiw	r28, 0x28	; 40
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <spi_init>:
#include <avr/io.h>

#include "print.h"

void spi_init(void) {
	DDRB = 0x03; // Set MOSI and clock as ouputs
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	84 b9       	out	0x04, r24	; 4

	SPCR = ( // DS.185
     ce6:	81 e5       	ldi	r24, 0x51	; 81
     ce8:	8c bd       	out	0x2c, r24	; 44
		| (1 << MSTR)	// Use in master mode
		| (0 << CPOL)	// Idle low
		| (0 << CPHA)	// Sample high, setup low
		| (1 << SPR0)	// SCK = f_osc / 16
	);
}
     cea:	08 95       	ret

00000cec <spi_transfer>:

u8 spi_transfer(u8 data) {
     cec:	cf 93       	push	r28
	SPDR = data;
     cee:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1 << SPIF)));
     cf0:	0d b4       	in	r0, 0x2d	; 45
     cf2:	07 fe       	sbrs	r0, 7
     cf4:	fd cf       	rjmp	.-6      	; 0xcf0 <spi_transfer+0x4>

	u8 b = SPDR;
     cf6:	ce b5       	in	r28, 0x2e	; 46

	ht_logf("0x%02x | 0x%02x\n", data, b);
     cf8:	1f 92       	push	r1
     cfa:	cf 93       	push	r28
     cfc:	1f 92       	push	r1
     cfe:	8f 93       	push	r24
     d00:	8d e1       	ldi	r24, 0x1D	; 29
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	9f 93       	push	r25
     d06:	8f 93       	push	r24
     d08:	6e d0       	rcall	.+220    	; 0xde6 <ht_logf>
	return b;
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
}
     d16:	8c 2f       	mov	r24, r28
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <sdep_send>:
#include <util/delay.h>

#include "spi.h"
#include "print.h"

void sdep_send(struct sdep_packet_s* packet, struct sdep_packet_s* response) {
     d1c:	ff 92       	push	r15
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	8c 01       	movw	r16, r24
     d28:	eb 01       	movw	r28, r22
#include <avr/io.h>

void spi_init(void);

static inline void spi_cs_assert(void) {
	PORTB &= ~0x10;
     d2a:	2c 98       	cbi	0x05, 4	; 5
	spi_cs_assert();

	ht_log("Send packet:\n");
     d2c:	8e e2       	ldi	r24, 0x2E	; 46
     d2e:	91 e0       	ldi	r25, 0x01	; 1
     d30:	4b d0       	rcall	.+150    	; 0xdc8 <ht_log>

	while (spi_transfer(packet->type) == 0xFE) {
     d32:	f8 01       	movw	r30, r16
     d34:	80 81       	ld	r24, Z
     d36:	da df       	rcall	.-76     	; 0xcec <spi_transfer>
     d38:	8e 3f       	cpi	r24, 0xFE	; 254
     d3a:	71 f1       	breq	.+92     	; 0xd98 <sdep_send+0x7c>
     d3c:	8f ec       	ldi	r24, 0xCF	; 207
     d3e:	97 e0       	ldi	r25, 0x07	; 7
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <sdep_send+0x24>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <sdep_send+0x2a>
     d46:	00 00       	nop
		spi_cs_assert();
	}

	_delay_ms(1);

	spi_transfer(packet->id_low);
     d48:	f8 01       	movw	r30, r16
     d4a:	82 81       	ldd	r24, Z+2	; 0x02
     d4c:	cf df       	rcall	.-98     	; 0xcec <spi_transfer>
	spi_transfer(packet->id_high);
     d4e:	f8 01       	movw	r30, r16
     d50:	81 81       	ldd	r24, Z+1	; 0x01
     d52:	cc df       	rcall	.-104    	; 0xcec <spi_transfer>
	spi_transfer(packet->size);
     d54:	f8 01       	movw	r30, r16
     d56:	83 81       	ldd	r24, Z+3	; 0x03
     d58:	c9 df       	rcall	.-110    	; 0xcec <spi_transfer>
     d5a:	f1 2c       	mov	r15, r1
	for (u8 i = 0; i < packet->size; ++i) {
     d5c:	f8 01       	movw	r30, r16
     d5e:	83 81       	ldd	r24, Z+3	; 0x03
     d60:	f8 16       	cp	r15, r24
     d62:	18 f1       	brcs	.+70     	; 0xdaa <sdep_send+0x8e>
		spi_transfer(packet->data[i]);
	}

	spi_cs_negate();

	ht_log("Response:\n");
     d64:	2c 9a       	sbi	0x05, 4	; 5
     d66:	8c e3       	ldi	r24, 0x3C	; 60
     d68:	91 e0       	ldi	r25, 0x01	; 1

	response->type = spi_transfer(0xFF);
     d6a:	2e d0       	rcall	.+92     	; 0xdc8 <ht_log>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	be df       	rcall	.-132    	; 0xcec <spi_transfer>
	response->id_low = spi_transfer(0xFF);
     d70:	88 83       	st	Y, r24
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	bb df       	rcall	.-138    	; 0xcec <spi_transfer>
	response->id_high = spi_transfer(0xFF);
     d76:	8a 83       	std	Y+2, r24	; 0x02
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	b8 df       	rcall	.-144    	; 0xcec <spi_transfer>
     d7c:	89 83       	std	Y+1, r24	; 0x01
	response->size = spi_transfer(0xFF);
     d7e:	8f ef       	ldi	r24, 0xFF	; 255
     d80:	b5 df       	rcall	.-150    	; 0xcec <spi_transfer>
     d82:	8b 83       	std	Y+3, r24	; 0x03
     d84:	10 e0       	ldi	r17, 0x00	; 0
	for (u8 i = 0; i < response->size; ++i) {
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	18 17       	cp	r17, r24
     d8a:	b0 f0       	brcs	.+44     	; 0xdb8 <sdep_send+0x9c>
     d8c:	df 91       	pop	r29
		response->data[i] = spi_transfer(0xFF);
	}

}
     d8e:	cf 91       	pop	r28
     d90:	1f 91       	pop	r17
     d92:	0f 91       	pop	r16
     d94:	ff 90       	pop	r15
     d96:	08 95       	ret
     d98:	2c 9a       	sbi	0x05, 4	; 5
	//spi_current_pins.cs_port |= spi_current_pins.cs_pin;		
}

static inline void spi_cs_negate(void) {
	PORTB |= 0x10;
     d9a:	8f ec       	ldi	r24, 0xCF	; 207
     d9c:	97 e0       	ldi	r25, 0x07	; 7
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <sdep_send+0x82>
     da2:	00 c0       	rjmp	.+0      	; 0xda4 <sdep_send+0x88>
     da4:	00 00       	nop
	PORTB &= ~0x10;
     da6:	2c 98       	cbi	0x05, 4	; 5
		spi_transfer(packet->data[i]);
     da8:	c4 cf       	rjmp	.-120    	; 0xd32 <sdep_send+0x16>
     daa:	f8 01       	movw	r30, r16
     dac:	ef 0d       	add	r30, r15
     dae:	f1 1d       	adc	r31, r1
     db0:	84 81       	ldd	r24, Z+4	; 0x04
     db2:	9c df       	rcall	.-200    	; 0xcec <spi_transfer>
	for (u8 i = 0; i < packet->size; ++i) {
     db4:	f3 94       	inc	r15
     db6:	d2 cf       	rjmp	.-92     	; 0xd5c <sdep_send+0x40>
		response->data[i] = spi_transfer(0xFF);
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	98 df       	rcall	.-208    	; 0xcec <spi_transfer>
     dbc:	fe 01       	movw	r30, r28
     dbe:	e1 0f       	add	r30, r17
     dc0:	f1 1d       	adc	r31, r1
     dc2:	84 83       	std	Z+4, r24	; 0x04
     dc4:	1f 5f       	subi	r17, 0xFF	; 255
	for (u8 i = 0; i < response->size; ++i) {
     dc6:	df cf       	rjmp	.-66     	; 0xd86 <sdep_send+0x6a>

00000dc8 <ht_log>:
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     dc8:	23 e0       	ldi	r18, 0x03	; 3
     dca:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
#include <LUFA/Platform/Platform.h>
#include "Descriptors.h"

void ht_log(char* str) {
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);
	Endpoint_Write_Stream_LE(str, strlen(str), NULL);
     dce:	fc 01       	movw	r30, r24
     dd0:	01 90       	ld	r0, Z+
     dd2:	00 20       	and	r0, r0
     dd4:	e9 f7       	brne	.-6      	; 0xdd0 <ht_log+0x8>
     dd6:	31 97       	sbiw	r30, 0x01	; 1
     dd8:	bf 01       	movw	r22, r30
     dda:	68 1b       	sub	r22, r24
     ddc:	79 0b       	sbc	r23, r25
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	40 e0       	ldi	r20, 0x00	; 0
     de2:	98 da       	rcall	.-2768   	; 0x314 <Endpoint_Write_Stream_LE>
	USB_USBTask();
     de4:	db ce       	rjmp	.-586    	; 0xb9c <USB_USBTask>

00000de6 <ht_logf>:
     de6:	cf 93       	push	r28
}

void ht_logf(char* fmt, ...) {
     de8:	df 93       	push	r29
     dea:	cd b7       	in	r28, 0x3d	; 61
     dec:	de b7       	in	r29, 0x3e	; 62
     dee:	9e 01       	movw	r18, r28
     df0:	2b 5f       	subi	r18, 0xFB	; 251
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	f9 01       	movw	r30, r18
     df6:	41 91       	ld	r20, Z+
     df8:	51 91       	ld	r21, Z+
     dfa:	9f 01       	movw	r18, r30
	static char buffer[256];

	va_list vargs;
	va_start(vargs, fmt);

	vsnprintf(buffer, sizeof(buffer), fmt, vargs);
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	71 e0       	ldi	r23, 0x01	; 1
     e00:	88 e4       	ldi	r24, 0x48	; 72
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	06 d0       	rcall	.+12     	; 0xe12 <vsnprintf>

	va_end(vargs);

	ht_log(buffer);
     e06:	88 e4       	ldi	r24, 0x48	; 72
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	de df       	rcall	.-68     	; 0xdc8 <ht_log>
}
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	08 95       	ret

00000e12 <vsnprintf>:
     e12:	ae e0       	ldi	r26, 0x0E	; 14
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ee e0       	ldi	r30, 0x0E	; 14
     e18:	f7 e0       	ldi	r31, 0x07	; 7
     e1a:	92 c2       	rjmp	.+1316   	; 0x1340 <__prologue_saves__+0x1c>
     e1c:	8c 01       	movw	r16, r24
     e1e:	fa 01       	movw	r30, r20
     e20:	86 e0       	ldi	r24, 0x06	; 6
     e22:	8c 83       	std	Y+4, r24	; 0x04
     e24:	1a 83       	std	Y+2, r17	; 0x02
     e26:	09 83       	std	Y+1, r16	; 0x01
     e28:	77 ff       	sbrs	r23, 7
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <vsnprintf+0x1e>
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	70 e8       	ldi	r23, 0x80	; 128
     e30:	61 50       	subi	r22, 0x01	; 1
     e32:	71 09       	sbc	r23, r1
     e34:	7e 83       	std	Y+6, r23	; 0x06
     e36:	6d 83       	std	Y+5, r22	; 0x05
     e38:	a9 01       	movw	r20, r18
     e3a:	bf 01       	movw	r22, r30
     e3c:	ce 01       	movw	r24, r28
     e3e:	01 96       	adiw	r24, 0x01	; 1
     e40:	11 d0       	rcall	.+34     	; 0xe64 <vfprintf>
     e42:	4d 81       	ldd	r20, Y+5	; 0x05
     e44:	5e 81       	ldd	r21, Y+6	; 0x06
     e46:	57 fd       	sbrc	r21, 7
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <vsnprintf+0x4c>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	42 17       	cp	r20, r18
     e50:	53 07       	cpc	r21, r19
     e52:	0c f4       	brge	.+2      	; 0xe56 <vsnprintf+0x44>
     e54:	9a 01       	movw	r18, r20
     e56:	02 0f       	add	r16, r18
     e58:	13 1f       	adc	r17, r19
     e5a:	f8 01       	movw	r30, r16
     e5c:	10 82       	st	Z, r1
     e5e:	2e 96       	adiw	r28, 0x0e	; 14
     e60:	e4 e0       	ldi	r30, 0x04	; 4
     e62:	8a c2       	rjmp	.+1300   	; 0x1378 <__epilogue_restores__+0x1c>

00000e64 <vfprintf>:
     e64:	ab e0       	ldi	r26, 0x0B	; 11
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e7 e3       	ldi	r30, 0x37	; 55
     e6a:	f7 e0       	ldi	r31, 0x07	; 7
     e6c:	5b c2       	rjmp	.+1206   	; 0x1324 <__prologue_saves__>
     e6e:	7c 01       	movw	r14, r24
     e70:	3b 01       	movw	r6, r22
     e72:	8a 01       	movw	r16, r20
     e74:	fc 01       	movw	r30, r24
     e76:	17 82       	std	Z+7, r1	; 0x07
     e78:	16 82       	std	Z+6, r1	; 0x06
     e7a:	83 81       	ldd	r24, Z+3	; 0x03
     e7c:	81 ff       	sbrs	r24, 1
     e7e:	ab c1       	rjmp	.+854    	; 0x11d6 <vfprintf+0x372>
     e80:	9a e0       	ldi	r25, 0x0A	; 10
     e82:	29 2e       	mov	r2, r25
     e84:	ce 01       	movw	r24, r28
     e86:	01 96       	adiw	r24, 0x01	; 1
     e88:	5c 01       	movw	r10, r24
     e8a:	f7 01       	movw	r30, r14
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	f3 01       	movw	r30, r6
     e90:	93 fd       	sbrc	r25, 3
     e92:	85 91       	lpm	r24, Z+
     e94:	93 ff       	sbrs	r25, 3
     e96:	81 91       	ld	r24, Z+
     e98:	3f 01       	movw	r6, r30
     e9a:	88 23       	and	r24, r24
     e9c:	09 f4       	brne	.+2      	; 0xea0 <vfprintf+0x3c>
     e9e:	3c c1       	rjmp	.+632    	; 0x1118 <vfprintf+0x2b4>
     ea0:	85 32       	cpi	r24, 0x25	; 37
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <vfprintf+0x4e>
     ea4:	93 fd       	sbrc	r25, 3
     ea6:	85 91       	lpm	r24, Z+
     ea8:	93 ff       	sbrs	r25, 3
     eaa:	81 91       	ld	r24, Z+
     eac:	3f 01       	movw	r6, r30
     eae:	85 32       	cpi	r24, 0x25	; 37
     eb0:	21 f4       	brne	.+8      	; 0xeba <vfprintf+0x56>
     eb2:	b7 01       	movw	r22, r14
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	a8 d1       	rcall	.+848    	; 0x1208 <fputc>
     eb8:	e8 cf       	rjmp	.-48     	; 0xe8a <vfprintf+0x26>
     eba:	91 2c       	mov	r9, r1
     ebc:	41 2c       	mov	r4, r1
     ebe:	51 2c       	mov	r5, r1
     ec0:	ff e1       	ldi	r31, 0x1F	; 31
     ec2:	f5 15       	cp	r31, r5
     ec4:	38 f0       	brcs	.+14     	; 0xed4 <vfprintf+0x70>
     ec6:	8b 32       	cpi	r24, 0x2B	; 43
     ec8:	09 f1       	breq	.+66     	; 0xf0c <vfprintf+0xa8>
     eca:	88 f4       	brcc	.+34     	; 0xeee <vfprintf+0x8a>
     ecc:	80 32       	cpi	r24, 0x20	; 32
     ece:	01 f1       	breq	.+64     	; 0xf10 <vfprintf+0xac>
     ed0:	83 32       	cpi	r24, 0x23	; 35
     ed2:	21 f1       	breq	.+72     	; 0xf1c <vfprintf+0xb8>
     ed4:	57 fc       	sbrc	r5, 7
     ed6:	3a c0       	rjmp	.+116    	; 0xf4c <vfprintf+0xe8>
     ed8:	20 ed       	ldi	r18, 0xD0	; 208
     eda:	28 0f       	add	r18, r24
     edc:	2a 30       	cpi	r18, 0x0A	; 10
     ede:	40 f5       	brcc	.+80     	; 0xf30 <vfprintf+0xcc>
     ee0:	56 fe       	sbrs	r5, 6
     ee2:	1f c0       	rjmp	.+62     	; 0xf22 <vfprintf+0xbe>
     ee4:	92 9c       	mul	r9, r2
     ee6:	20 0d       	add	r18, r0
     ee8:	11 24       	eor	r1, r1
     eea:	92 2e       	mov	r9, r18
     eec:	06 c0       	rjmp	.+12     	; 0xefa <vfprintf+0x96>
     eee:	8d 32       	cpi	r24, 0x2D	; 45
     ef0:	91 f0       	breq	.+36     	; 0xf16 <vfprintf+0xb2>
     ef2:	80 33       	cpi	r24, 0x30	; 48
     ef4:	79 f7       	brne	.-34     	; 0xed4 <vfprintf+0x70>
     ef6:	68 94       	set
     ef8:	50 f8       	bld	r5, 0
     efa:	f3 01       	movw	r30, r6
     efc:	93 fd       	sbrc	r25, 3
     efe:	85 91       	lpm	r24, Z+
     f00:	93 ff       	sbrs	r25, 3
     f02:	81 91       	ld	r24, Z+
     f04:	3f 01       	movw	r6, r30
     f06:	81 11       	cpse	r24, r1
     f08:	db cf       	rjmp	.-74     	; 0xec0 <vfprintf+0x5c>
     f0a:	20 c0       	rjmp	.+64     	; 0xf4c <vfprintf+0xe8>
     f0c:	68 94       	set
     f0e:	51 f8       	bld	r5, 1
     f10:	68 94       	set
     f12:	52 f8       	bld	r5, 2
     f14:	f2 cf       	rjmp	.-28     	; 0xefa <vfprintf+0x96>
     f16:	68 94       	set
     f18:	53 f8       	bld	r5, 3
     f1a:	ef cf       	rjmp	.-34     	; 0xefa <vfprintf+0x96>
     f1c:	68 94       	set
     f1e:	54 f8       	bld	r5, 4
     f20:	ec cf       	rjmp	.-40     	; 0xefa <vfprintf+0x96>
     f22:	42 9c       	mul	r4, r2
     f24:	20 0d       	add	r18, r0
     f26:	11 24       	eor	r1, r1
     f28:	42 2e       	mov	r4, r18
     f2a:	68 94       	set
     f2c:	55 f8       	bld	r5, 5
     f2e:	e5 cf       	rjmp	.-54     	; 0xefa <vfprintf+0x96>
     f30:	8e 32       	cpi	r24, 0x2E	; 46
     f32:	29 f4       	brne	.+10     	; 0xf3e <vfprintf+0xda>
     f34:	56 fc       	sbrc	r5, 6
     f36:	f0 c0       	rjmp	.+480    	; 0x1118 <vfprintf+0x2b4>
     f38:	68 94       	set
     f3a:	56 f8       	bld	r5, 6
     f3c:	de cf       	rjmp	.-68     	; 0xefa <vfprintf+0x96>
     f3e:	8c 36       	cpi	r24, 0x6C	; 108
     f40:	19 f4       	brne	.+6      	; 0xf48 <vfprintf+0xe4>
     f42:	68 94       	set
     f44:	57 f8       	bld	r5, 7
     f46:	d9 cf       	rjmp	.-78     	; 0xefa <vfprintf+0x96>
     f48:	88 36       	cpi	r24, 0x68	; 104
     f4a:	b9 f2       	breq	.-82     	; 0xefa <vfprintf+0x96>
     f4c:	98 2f       	mov	r25, r24
     f4e:	9f 7d       	andi	r25, 0xDF	; 223
     f50:	95 54       	subi	r25, 0x45	; 69
     f52:	93 30       	cpi	r25, 0x03	; 3
     f54:	b8 f0       	brcs	.+46     	; 0xf84 <vfprintf+0x120>
     f56:	83 36       	cpi	r24, 0x63	; 99
     f58:	91 f1       	breq	.+100    	; 0xfbe <vfprintf+0x15a>
     f5a:	83 37       	cpi	r24, 0x73	; 115
     f5c:	b1 f1       	breq	.+108    	; 0xfca <vfprintf+0x166>
     f5e:	83 35       	cpi	r24, 0x53	; 83
     f60:	09 f0       	breq	.+2      	; 0xf64 <vfprintf+0x100>
     f62:	56 c0       	rjmp	.+172    	; 0x1010 <vfprintf+0x1ac>
     f64:	f8 01       	movw	r30, r16
     f66:	c1 90       	ld	r12, Z+
     f68:	d1 90       	ld	r13, Z+
     f6a:	8f 01       	movw	r16, r30
     f6c:	69 2d       	mov	r22, r9
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	56 fc       	sbrc	r5, 6
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <vfprintf+0x114>
     f74:	6f ef       	ldi	r22, 0xFF	; 255
     f76:	7f ef       	ldi	r23, 0xFF	; 255
     f78:	c6 01       	movw	r24, r12
     f7a:	30 d1       	rcall	.+608    	; 0x11dc <strnlen_P>
     f7c:	4c 01       	movw	r8, r24
     f7e:	68 94       	set
     f80:	57 f8       	bld	r5, 7
     f82:	0a c0       	rjmp	.+20     	; 0xf98 <vfprintf+0x134>
     f84:	0c 5f       	subi	r16, 0xFC	; 252
     f86:	1f 4f       	sbci	r17, 0xFF	; 255
     f88:	2f e3       	ldi	r18, 0x3F	; 63
     f8a:	29 83       	std	Y+1, r18	; 0x01
     f8c:	88 24       	eor	r8, r8
     f8e:	83 94       	inc	r8
     f90:	91 2c       	mov	r9, r1
     f92:	65 01       	movw	r12, r10
     f94:	e8 94       	clt
     f96:	57 f8       	bld	r5, 7
     f98:	53 fc       	sbrc	r5, 3
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <vfprintf+0x140>
     f9c:	48 14       	cp	r4, r8
     f9e:	19 04       	cpc	r1, r9
     fa0:	09 f0       	breq	.+2      	; 0xfa4 <vfprintf+0x140>
     fa2:	08 f5       	brcc	.+66     	; 0xfe6 <vfprintf+0x182>
     fa4:	34 2c       	mov	r3, r4
     fa6:	81 14       	cp	r8, r1
     fa8:	91 04       	cpc	r9, r1
     faa:	19 f5       	brne	.+70     	; 0xff2 <vfprintf+0x18e>
     fac:	33 20       	and	r3, r3
     fae:	09 f4       	brne	.+2      	; 0xfb2 <vfprintf+0x14e>
     fb0:	6c cf       	rjmp	.-296    	; 0xe8a <vfprintf+0x26>
     fb2:	b7 01       	movw	r22, r14
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	27 d1       	rcall	.+590    	; 0x1208 <fputc>
     fba:	3a 94       	dec	r3
     fbc:	f7 cf       	rjmp	.-18     	; 0xfac <vfprintf+0x148>
     fbe:	f8 01       	movw	r30, r16
     fc0:	80 81       	ld	r24, Z
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	0e 5f       	subi	r16, 0xFE	; 254
     fc6:	1f 4f       	sbci	r17, 0xFF	; 255
     fc8:	e1 cf       	rjmp	.-62     	; 0xf8c <vfprintf+0x128>
     fca:	f8 01       	movw	r30, r16
     fcc:	c1 90       	ld	r12, Z+
     fce:	d1 90       	ld	r13, Z+
     fd0:	8f 01       	movw	r16, r30
     fd2:	69 2d       	mov	r22, r9
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	56 fc       	sbrc	r5, 6
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <vfprintf+0x17a>
     fda:	6f ef       	ldi	r22, 0xFF	; 255
     fdc:	7f ef       	ldi	r23, 0xFF	; 255
     fde:	c6 01       	movw	r24, r12
     fe0:	08 d1       	rcall	.+528    	; 0x11f2 <strnlen>
     fe2:	4c 01       	movw	r8, r24
     fe4:	d7 cf       	rjmp	.-82     	; 0xf94 <vfprintf+0x130>
     fe6:	b7 01       	movw	r22, r14
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	0d d1       	rcall	.+538    	; 0x1208 <fputc>
     fee:	4a 94       	dec	r4
     ff0:	d5 cf       	rjmp	.-86     	; 0xf9c <vfprintf+0x138>
     ff2:	f6 01       	movw	r30, r12
     ff4:	57 fc       	sbrc	r5, 7
     ff6:	85 91       	lpm	r24, Z+
     ff8:	57 fe       	sbrs	r5, 7
     ffa:	81 91       	ld	r24, Z+
     ffc:	6f 01       	movw	r12, r30
     ffe:	b7 01       	movw	r22, r14
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 d1       	rcall	.+516    	; 0x1208 <fputc>
    1004:	31 10       	cpse	r3, r1
    1006:	3a 94       	dec	r3
    1008:	f1 e0       	ldi	r31, 0x01	; 1
    100a:	8f 1a       	sub	r8, r31
    100c:	91 08       	sbc	r9, r1
    100e:	cb cf       	rjmp	.-106    	; 0xfa6 <vfprintf+0x142>
    1010:	84 36       	cpi	r24, 0x64	; 100
    1012:	19 f0       	breq	.+6      	; 0x101a <vfprintf+0x1b6>
    1014:	89 36       	cpi	r24, 0x69	; 105
    1016:	09 f0       	breq	.+2      	; 0x101a <vfprintf+0x1b6>
    1018:	70 c0       	rjmp	.+224    	; 0x10fa <vfprintf+0x296>
    101a:	f8 01       	movw	r30, r16
    101c:	57 fe       	sbrs	r5, 7
    101e:	66 c0       	rjmp	.+204    	; 0x10ec <vfprintf+0x288>
    1020:	61 91       	ld	r22, Z+
    1022:	71 91       	ld	r23, Z+
    1024:	81 91       	ld	r24, Z+
    1026:	91 91       	ld	r25, Z+
    1028:	8f 01       	movw	r16, r30
    102a:	25 2d       	mov	r18, r5
    102c:	2f 76       	andi	r18, 0x6F	; 111
    102e:	d2 2e       	mov	r13, r18
    1030:	97 ff       	sbrs	r25, 7
    1032:	09 c0       	rjmp	.+18     	; 0x1046 <vfprintf+0x1e2>
    1034:	90 95       	com	r25
    1036:	80 95       	com	r24
    1038:	70 95       	com	r23
    103a:	61 95       	neg	r22
    103c:	7f 4f       	sbci	r23, 0xFF	; 255
    103e:	8f 4f       	sbci	r24, 0xFF	; 255
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	68 94       	set
    1044:	d7 f8       	bld	r13, 7
    1046:	2a e0       	ldi	r18, 0x0A	; 10
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	a5 01       	movw	r20, r10
    104c:	0d d1       	rcall	.+538    	; 0x1268 <__ultoa_invert>
    104e:	c8 2e       	mov	r12, r24
    1050:	ca 18       	sub	r12, r10
    1052:	8c 2c       	mov	r8, r12
    1054:	5d 2c       	mov	r5, r13
    1056:	d6 fe       	sbrs	r13, 6
    1058:	0c c0       	rjmp	.+24     	; 0x1072 <vfprintf+0x20e>
    105a:	e8 94       	clt
    105c:	50 f8       	bld	r5, 0
    105e:	c9 14       	cp	r12, r9
    1060:	40 f4       	brcc	.+16     	; 0x1072 <vfprintf+0x20e>
    1062:	d4 fe       	sbrs	r13, 4
    1064:	05 c0       	rjmp	.+10     	; 0x1070 <vfprintf+0x20c>
    1066:	d2 fc       	sbrc	r13, 2
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <vfprintf+0x20c>
    106a:	fd 2d       	mov	r31, r13
    106c:	fe 7e       	andi	r31, 0xEE	; 238
    106e:	5f 2e       	mov	r5, r31
    1070:	89 2c       	mov	r8, r9
    1072:	54 fe       	sbrs	r5, 4
    1074:	8a c0       	rjmp	.+276    	; 0x118a <vfprintf+0x326>
    1076:	fe 01       	movw	r30, r28
    1078:	ec 0d       	add	r30, r12
    107a:	f1 1d       	adc	r31, r1
    107c:	80 81       	ld	r24, Z
    107e:	80 33       	cpi	r24, 0x30	; 48
    1080:	09 f0       	breq	.+2      	; 0x1084 <vfprintf+0x220>
    1082:	7c c0       	rjmp	.+248    	; 0x117c <vfprintf+0x318>
    1084:	25 2d       	mov	r18, r5
    1086:	29 7e       	andi	r18, 0xE9	; 233
    1088:	52 2e       	mov	r5, r18
    108a:	85 2d       	mov	r24, r5
    108c:	88 70       	andi	r24, 0x08	; 8
    108e:	38 2e       	mov	r3, r24
    1090:	53 fc       	sbrc	r5, 3
    1092:	89 c0       	rjmp	.+274    	; 0x11a6 <vfprintf+0x342>
    1094:	50 fe       	sbrs	r5, 0
    1096:	83 c0       	rjmp	.+262    	; 0x119e <vfprintf+0x33a>
    1098:	9c 2c       	mov	r9, r12
    109a:	84 14       	cp	r8, r4
    109c:	18 f4       	brcc	.+6      	; 0x10a4 <vfprintf+0x240>
    109e:	4c 0c       	add	r4, r12
    10a0:	94 2c       	mov	r9, r4
    10a2:	98 18       	sub	r9, r8
    10a4:	54 fe       	sbrs	r5, 4
    10a6:	85 c0       	rjmp	.+266    	; 0x11b2 <vfprintf+0x34e>
    10a8:	b7 01       	movw	r22, r14
    10aa:	80 e3       	ldi	r24, 0x30	; 48
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	ac d0       	rcall	.+344    	; 0x1208 <fputc>
    10b0:	52 fe       	sbrs	r5, 2
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <vfprintf+0x260>
    10b4:	88 e7       	ldi	r24, 0x78	; 120
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	51 fe       	sbrs	r5, 1
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <vfprintf+0x25c>
    10bc:	88 e5       	ldi	r24, 0x58	; 88
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	b7 01       	movw	r22, r14
    10c2:	a2 d0       	rcall	.+324    	; 0x1208 <fputc>
    10c4:	c9 14       	cp	r12, r9
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <vfprintf+0x266>
    10c8:	80 c0       	rjmp	.+256    	; 0x11ca <vfprintf+0x366>
    10ca:	ca 94       	dec	r12
    10cc:	d1 2c       	mov	r13, r1
    10ce:	9f ef       	ldi	r25, 0xFF	; 255
    10d0:	c9 1a       	sub	r12, r25
    10d2:	d9 0a       	sbc	r13, r25
    10d4:	ca 0c       	add	r12, r10
    10d6:	db 1c       	adc	r13, r11
    10d8:	f6 01       	movw	r30, r12
    10da:	82 91       	ld	r24, -Z
    10dc:	6f 01       	movw	r12, r30
    10de:	b7 01       	movw	r22, r14
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	92 d0       	rcall	.+292    	; 0x1208 <fputc>
    10e4:	ac 14       	cp	r10, r12
    10e6:	bd 04       	cpc	r11, r13
    10e8:	b9 f7       	brne	.-18     	; 0x10d8 <vfprintf+0x274>
    10ea:	60 cf       	rjmp	.-320    	; 0xfac <vfprintf+0x148>
    10ec:	61 91       	ld	r22, Z+
    10ee:	71 91       	ld	r23, Z+
    10f0:	07 2e       	mov	r0, r23
    10f2:	00 0c       	add	r0, r0
    10f4:	88 0b       	sbc	r24, r24
    10f6:	99 0b       	sbc	r25, r25
    10f8:	97 cf       	rjmp	.-210    	; 0x1028 <vfprintf+0x1c4>
    10fa:	d5 2c       	mov	r13, r5
    10fc:	e8 94       	clt
    10fe:	d4 f8       	bld	r13, 4
    1100:	2a e0       	ldi	r18, 0x0A	; 10
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	85 37       	cpi	r24, 0x75	; 117
    1106:	31 f1       	breq	.+76     	; 0x1154 <vfprintf+0x2f0>
    1108:	95 2d       	mov	r25, r5
    110a:	99 7f       	andi	r25, 0xF9	; 249
    110c:	d9 2e       	mov	r13, r25
    110e:	8f 36       	cpi	r24, 0x6F	; 111
    1110:	f9 f0       	breq	.+62     	; 0x1150 <vfprintf+0x2ec>
    1112:	40 f4       	brcc	.+16     	; 0x1124 <vfprintf+0x2c0>
    1114:	88 35       	cpi	r24, 0x58	; 88
    1116:	a1 f0       	breq	.+40     	; 0x1140 <vfprintf+0x2dc>
    1118:	f7 01       	movw	r30, r14
    111a:	86 81       	ldd	r24, Z+6	; 0x06
    111c:	97 81       	ldd	r25, Z+7	; 0x07
    111e:	2b 96       	adiw	r28, 0x0b	; 11
    1120:	e2 e1       	ldi	r30, 0x12	; 18
    1122:	1c c1       	rjmp	.+568    	; 0x135c <__epilogue_restores__>
    1124:	80 37       	cpi	r24, 0x70	; 112
    1126:	49 f0       	breq	.+18     	; 0x113a <vfprintf+0x2d6>
    1128:	88 37       	cpi	r24, 0x78	; 120
    112a:	b1 f7       	brne	.-20     	; 0x1118 <vfprintf+0x2b4>
    112c:	d4 fe       	sbrs	r13, 4
    112e:	02 c0       	rjmp	.+4      	; 0x1134 <vfprintf+0x2d0>
    1130:	68 94       	set
    1132:	d2 f8       	bld	r13, 2
    1134:	20 e1       	ldi	r18, 0x10	; 16
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <vfprintf+0x2f0>
    113a:	68 94       	set
    113c:	d4 f8       	bld	r13, 4
    113e:	f6 cf       	rjmp	.-20     	; 0x112c <vfprintf+0x2c8>
    1140:	54 fe       	sbrs	r5, 4
    1142:	03 c0       	rjmp	.+6      	; 0x114a <vfprintf+0x2e6>
    1144:	e9 2f       	mov	r30, r25
    1146:	e6 60       	ori	r30, 0x06	; 6
    1148:	de 2e       	mov	r13, r30
    114a:	20 e1       	ldi	r18, 0x10	; 16
    114c:	32 e0       	ldi	r19, 0x02	; 2
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <vfprintf+0x2f0>
    1150:	28 e0       	ldi	r18, 0x08	; 8
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	f8 01       	movw	r30, r16
    1156:	d7 fe       	sbrs	r13, 7
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <vfprintf+0x30e>
    115a:	61 91       	ld	r22, Z+
    115c:	71 91       	ld	r23, Z+
    115e:	81 91       	ld	r24, Z+
    1160:	91 91       	ld	r25, Z+
    1162:	8f 01       	movw	r16, r30
    1164:	a5 01       	movw	r20, r10
    1166:	80 d0       	rcall	.+256    	; 0x1268 <__ultoa_invert>
    1168:	c8 2e       	mov	r12, r24
    116a:	ca 18       	sub	r12, r10
    116c:	e8 94       	clt
    116e:	d7 f8       	bld	r13, 7
    1170:	70 cf       	rjmp	.-288    	; 0x1052 <vfprintf+0x1ee>
    1172:	61 91       	ld	r22, Z+
    1174:	71 91       	ld	r23, Z+
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	f3 cf       	rjmp	.-26     	; 0x1162 <vfprintf+0x2fe>
    117c:	52 fc       	sbrc	r5, 2
    117e:	02 c0       	rjmp	.+4      	; 0x1184 <vfprintf+0x320>
    1180:	83 94       	inc	r8
    1182:	83 cf       	rjmp	.-250    	; 0x108a <vfprintf+0x226>
    1184:	83 94       	inc	r8
    1186:	83 94       	inc	r8
    1188:	80 cf       	rjmp	.-256    	; 0x108a <vfprintf+0x226>
    118a:	85 2d       	mov	r24, r5
    118c:	86 78       	andi	r24, 0x86	; 134
    118e:	09 f4       	brne	.+2      	; 0x1192 <vfprintf+0x32e>
    1190:	7c cf       	rjmp	.-264    	; 0x108a <vfprintf+0x226>
    1192:	f6 cf       	rjmp	.-20     	; 0x1180 <vfprintf+0x31c>
    1194:	b7 01       	movw	r22, r14
    1196:	80 e2       	ldi	r24, 0x20	; 32
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	36 d0       	rcall	.+108    	; 0x1208 <fputc>
    119c:	83 94       	inc	r8
    119e:	84 14       	cp	r8, r4
    11a0:	c8 f3       	brcs	.-14     	; 0x1194 <vfprintf+0x330>
    11a2:	31 2c       	mov	r3, r1
    11a4:	7f cf       	rjmp	.-258    	; 0x10a4 <vfprintf+0x240>
    11a6:	34 2c       	mov	r3, r4
    11a8:	38 18       	sub	r3, r8
    11aa:	84 14       	cp	r8, r4
    11ac:	08 f4       	brcc	.+2      	; 0x11b0 <vfprintf+0x34c>
    11ae:	7a cf       	rjmp	.-268    	; 0x10a4 <vfprintf+0x240>
    11b0:	f8 cf       	rjmp	.-16     	; 0x11a2 <vfprintf+0x33e>
    11b2:	85 2d       	mov	r24, r5
    11b4:	86 78       	andi	r24, 0x86	; 134
    11b6:	09 f4       	brne	.+2      	; 0x11ba <vfprintf+0x356>
    11b8:	85 cf       	rjmp	.-246    	; 0x10c4 <vfprintf+0x260>
    11ba:	8b e2       	ldi	r24, 0x2B	; 43
    11bc:	51 fe       	sbrs	r5, 1
    11be:	80 e2       	ldi	r24, 0x20	; 32
    11c0:	57 fc       	sbrc	r5, 7
    11c2:	8d e2       	ldi	r24, 0x2D	; 45
    11c4:	b7 01       	movw	r22, r14
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	7c cf       	rjmp	.-264    	; 0x10c2 <vfprintf+0x25e>
    11ca:	b7 01       	movw	r22, r14
    11cc:	80 e3       	ldi	r24, 0x30	; 48
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	1b d0       	rcall	.+54     	; 0x1208 <fputc>
    11d2:	9a 94       	dec	r9
    11d4:	77 cf       	rjmp	.-274    	; 0x10c4 <vfprintf+0x260>
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	9f ef       	ldi	r25, 0xFF	; 255
    11da:	a1 cf       	rjmp	.-190    	; 0x111e <vfprintf+0x2ba>

000011dc <strnlen_P>:
    11dc:	fc 01       	movw	r30, r24
    11de:	05 90       	lpm	r0, Z+
    11e0:	61 50       	subi	r22, 0x01	; 1
    11e2:	70 40       	sbci	r23, 0x00	; 0
    11e4:	01 10       	cpse	r0, r1
    11e6:	d8 f7       	brcc	.-10     	; 0x11de <strnlen_P+0x2>
    11e8:	80 95       	com	r24
    11ea:	90 95       	com	r25
    11ec:	8e 0f       	add	r24, r30
    11ee:	9f 1f       	adc	r25, r31
    11f0:	08 95       	ret

000011f2 <strnlen>:
    11f2:	fc 01       	movw	r30, r24
    11f4:	61 50       	subi	r22, 0x01	; 1
    11f6:	70 40       	sbci	r23, 0x00	; 0
    11f8:	01 90       	ld	r0, Z+
    11fa:	01 10       	cpse	r0, r1
    11fc:	d8 f7       	brcc	.-10     	; 0x11f4 <strnlen+0x2>
    11fe:	80 95       	com	r24
    1200:	90 95       	com	r25
    1202:	8e 0f       	add	r24, r30
    1204:	9f 1f       	adc	r25, r31
    1206:	08 95       	ret

00001208 <fputc>:
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	18 2f       	mov	r17, r24
    1212:	09 2f       	mov	r16, r25
    1214:	eb 01       	movw	r28, r22
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	81 fd       	sbrc	r24, 1
    121a:	09 c0       	rjmp	.+18     	; 0x122e <fputc+0x26>
    121c:	1f ef       	ldi	r17, 0xFF	; 255
    121e:	0f ef       	ldi	r16, 0xFF	; 255
    1220:	81 2f       	mov	r24, r17
    1222:	90 2f       	mov	r25, r16
    1224:	df 91       	pop	r29
    1226:	cf 91       	pop	r28
    1228:	1f 91       	pop	r17
    122a:	0f 91       	pop	r16
    122c:	08 95       	ret
    122e:	82 ff       	sbrs	r24, 2
    1230:	14 c0       	rjmp	.+40     	; 0x125a <fputc+0x52>
    1232:	2e 81       	ldd	r18, Y+6	; 0x06
    1234:	3f 81       	ldd	r19, Y+7	; 0x07
    1236:	8c 81       	ldd	r24, Y+4	; 0x04
    1238:	9d 81       	ldd	r25, Y+5	; 0x05
    123a:	28 17       	cp	r18, r24
    123c:	39 07       	cpc	r19, r25
    123e:	3c f4       	brge	.+14     	; 0x124e <fputc+0x46>
    1240:	e8 81       	ld	r30, Y
    1242:	f9 81       	ldd	r31, Y+1	; 0x01
    1244:	cf 01       	movw	r24, r30
    1246:	01 96       	adiw	r24, 0x01	; 1
    1248:	99 83       	std	Y+1, r25	; 0x01
    124a:	88 83       	st	Y, r24
    124c:	10 83       	st	Z, r17
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	9f 83       	std	Y+7, r25	; 0x07
    1256:	8e 83       	std	Y+6, r24	; 0x06
    1258:	e3 cf       	rjmp	.-58     	; 0x1220 <fputc+0x18>
    125a:	e8 85       	ldd	r30, Y+8	; 0x08
    125c:	f9 85       	ldd	r31, Y+9	; 0x09
    125e:	81 2f       	mov	r24, r17
    1260:	09 95       	icall
    1262:	89 2b       	or	r24, r25
    1264:	a1 f3       	breq	.-24     	; 0x124e <fputc+0x46>
    1266:	da cf       	rjmp	.-76     	; 0x121c <fputc+0x14>

00001268 <__ultoa_invert>:
    1268:	fa 01       	movw	r30, r20
    126a:	aa 27       	eor	r26, r26
    126c:	28 30       	cpi	r18, 0x08	; 8
    126e:	51 f1       	breq	.+84     	; 0x12c4 <__ultoa_invert+0x5c>
    1270:	20 31       	cpi	r18, 0x10	; 16
    1272:	81 f1       	breq	.+96     	; 0x12d4 <__ultoa_invert+0x6c>
    1274:	e8 94       	clt
    1276:	6f 93       	push	r22
    1278:	6e 7f       	andi	r22, 0xFE	; 254
    127a:	6e 5f       	subi	r22, 0xFE	; 254
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	8f 4f       	sbci	r24, 0xFF	; 255
    1280:	9f 4f       	sbci	r25, 0xFF	; 255
    1282:	af 4f       	sbci	r26, 0xFF	; 255
    1284:	b1 e0       	ldi	r27, 0x01	; 1
    1286:	3e d0       	rcall	.+124    	; 0x1304 <__ultoa_invert+0x9c>
    1288:	b4 e0       	ldi	r27, 0x04	; 4
    128a:	3c d0       	rcall	.+120    	; 0x1304 <__ultoa_invert+0x9c>
    128c:	67 0f       	add	r22, r23
    128e:	78 1f       	adc	r23, r24
    1290:	89 1f       	adc	r24, r25
    1292:	9a 1f       	adc	r25, r26
    1294:	a1 1d       	adc	r26, r1
    1296:	68 0f       	add	r22, r24
    1298:	79 1f       	adc	r23, r25
    129a:	8a 1f       	adc	r24, r26
    129c:	91 1d       	adc	r25, r1
    129e:	a1 1d       	adc	r26, r1
    12a0:	6a 0f       	add	r22, r26
    12a2:	71 1d       	adc	r23, r1
    12a4:	81 1d       	adc	r24, r1
    12a6:	91 1d       	adc	r25, r1
    12a8:	a1 1d       	adc	r26, r1
    12aa:	20 d0       	rcall	.+64     	; 0x12ec <__ultoa_invert+0x84>
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <__ultoa_invert+0x48>
    12ae:	68 94       	set
    12b0:	3f 91       	pop	r19
    12b2:	2a e0       	ldi	r18, 0x0A	; 10
    12b4:	26 9f       	mul	r18, r22
    12b6:	11 24       	eor	r1, r1
    12b8:	30 19       	sub	r19, r0
    12ba:	30 5d       	subi	r19, 0xD0	; 208
    12bc:	31 93       	st	Z+, r19
    12be:	de f6       	brtc	.-74     	; 0x1276 <__ultoa_invert+0xe>
    12c0:	cf 01       	movw	r24, r30
    12c2:	08 95       	ret
    12c4:	46 2f       	mov	r20, r22
    12c6:	47 70       	andi	r20, 0x07	; 7
    12c8:	40 5d       	subi	r20, 0xD0	; 208
    12ca:	41 93       	st	Z+, r20
    12cc:	b3 e0       	ldi	r27, 0x03	; 3
    12ce:	0f d0       	rcall	.+30     	; 0x12ee <__ultoa_invert+0x86>
    12d0:	c9 f7       	brne	.-14     	; 0x12c4 <__ultoa_invert+0x5c>
    12d2:	f6 cf       	rjmp	.-20     	; 0x12c0 <__ultoa_invert+0x58>
    12d4:	46 2f       	mov	r20, r22
    12d6:	4f 70       	andi	r20, 0x0F	; 15
    12d8:	40 5d       	subi	r20, 0xD0	; 208
    12da:	4a 33       	cpi	r20, 0x3A	; 58
    12dc:	18 f0       	brcs	.+6      	; 0x12e4 <__ultoa_invert+0x7c>
    12de:	49 5d       	subi	r20, 0xD9	; 217
    12e0:	31 fd       	sbrc	r19, 1
    12e2:	40 52       	subi	r20, 0x20	; 32
    12e4:	41 93       	st	Z+, r20
    12e6:	02 d0       	rcall	.+4      	; 0x12ec <__ultoa_invert+0x84>
    12e8:	a9 f7       	brne	.-22     	; 0x12d4 <__ultoa_invert+0x6c>
    12ea:	ea cf       	rjmp	.-44     	; 0x12c0 <__ultoa_invert+0x58>
    12ec:	b4 e0       	ldi	r27, 0x04	; 4
    12ee:	a6 95       	lsr	r26
    12f0:	97 95       	ror	r25
    12f2:	87 95       	ror	r24
    12f4:	77 95       	ror	r23
    12f6:	67 95       	ror	r22
    12f8:	ba 95       	dec	r27
    12fa:	c9 f7       	brne	.-14     	; 0x12ee <__ultoa_invert+0x86>
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	61 05       	cpc	r22, r1
    1300:	71 05       	cpc	r23, r1
    1302:	08 95       	ret
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	0a 2e       	mov	r0, r26
    130a:	06 94       	lsr	r0
    130c:	57 95       	ror	r21
    130e:	47 95       	ror	r20
    1310:	37 95       	ror	r19
    1312:	27 95       	ror	r18
    1314:	ba 95       	dec	r27
    1316:	c9 f7       	brne	.-14     	; 0x130a <__ultoa_invert+0xa2>
    1318:	62 0f       	add	r22, r18
    131a:	73 1f       	adc	r23, r19
    131c:	84 1f       	adc	r24, r20
    131e:	95 1f       	adc	r25, r21
    1320:	a0 1d       	adc	r26, r0
    1322:	08 95       	ret

00001324 <__prologue_saves__>:
    1324:	2f 92       	push	r2
    1326:	3f 92       	push	r3
    1328:	4f 92       	push	r4
    132a:	5f 92       	push	r5
    132c:	6f 92       	push	r6
    132e:	7f 92       	push	r7
    1330:	8f 92       	push	r8
    1332:	9f 92       	push	r9
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	ca 1b       	sub	r28, r26
    134e:	db 0b       	sbc	r29, r27
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	09 94       	ijmp

0000135c <__epilogue_restores__>:
    135c:	2a 88       	ldd	r2, Y+18	; 0x12
    135e:	39 88       	ldd	r3, Y+17	; 0x11
    1360:	48 88       	ldd	r4, Y+16	; 0x10
    1362:	5f 84       	ldd	r5, Y+15	; 0x0f
    1364:	6e 84       	ldd	r6, Y+14	; 0x0e
    1366:	7d 84       	ldd	r7, Y+13	; 0x0d
    1368:	8c 84       	ldd	r8, Y+12	; 0x0c
    136a:	9b 84       	ldd	r9, Y+11	; 0x0b
    136c:	aa 84       	ldd	r10, Y+10	; 0x0a
    136e:	b9 84       	ldd	r11, Y+9	; 0x09
    1370:	c8 84       	ldd	r12, Y+8	; 0x08
    1372:	df 80       	ldd	r13, Y+7	; 0x07
    1374:	ee 80       	ldd	r14, Y+6	; 0x06
    1376:	fd 80       	ldd	r15, Y+5	; 0x05
    1378:	0c 81       	ldd	r16, Y+4	; 0x04
    137a:	1b 81       	ldd	r17, Y+3	; 0x03
    137c:	aa 81       	ldd	r26, Y+2	; 0x02
    137e:	b9 81       	ldd	r27, Y+1	; 0x01
    1380:	ce 0f       	add	r28, r30
    1382:	d1 1d       	adc	r29, r1
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	ed 01       	movw	r28, r26
    1390:	08 95       	ret

00001392 <_exit>:
    1392:	f8 94       	cli

00001394 <__stop_program>:
    1394:	ff cf       	rjmp	.-2      	; 0x1394 <__stop_program>
