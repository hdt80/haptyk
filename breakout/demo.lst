
demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000132  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000132  000001a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006d8  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d0c  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015a0  2**2
                  CONTENTS, READONLY
  6 .debug_info   0000048c  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000044e  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00001eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000017a  00000000  00000000  00001ed3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	32 d0       	rcall	.+100    	; 0x98 <main>
  34:	7c c0       	rjmp	.+248    	; 0x12e <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <init_uart>:

#include "i2c_master.h"

void init_uart(uint16_t baudrate){

	uint16_t UBRR_val = (F_CPU / 16) / (baudrate - 1);
  38:	01 97       	sbiw	r24, 0x01	; 1
  3a:	9c 01       	movw	r18, r24
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	40 e0       	ldi	r20, 0x00	; 0
  40:	60 e4       	ldi	r22, 0x40	; 64
  42:	72 e4       	ldi	r23, 0x42	; 66
  44:	8f e0       	ldi	r24, 0x0F	; 15
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	34 d0       	rcall	.+104    	; 0xb2 <__divmodsi4>

	UBRR1H = UBRR_val >> 8;
  4a:	83 2f       	mov	r24, r19
  4c:	99 27       	eor	r25, r25
  4e:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <_edata+0x6d>
	UBRR1L = UBRR_val;
  52:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <_edata+0x6c>

	UCSR1B |= (1<<TXEN1) | (1<<RXEN1) | (1<<RXCIE1); // UART TX 
  56:	e9 ec       	ldi	r30, 0xC9	; 201
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	80 81       	ld	r24, Z
  5c:	88 69       	ori	r24, 0x98	; 152
  5e:	80 83       	st	Z, r24
	UCSR1C |= (1<<USBS1) | (3<<UCSZ10); //Modus Asynchron 8N1 (8 databits, No Parity, 1 Stopbit)
  60:	ea ec       	ldi	r30, 0xCA	; 202
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	8e 60       	ori	r24, 0x0E	; 14
  68:	80 83       	st	Z, r24
}
  6a:	08 95       	ret

0000006c <uart_putc>:

void uart_putc(unsigned char c){

	while(!(UCSR1A & (1<<UDRE1))); // wait until sending is possible
  6c:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <_edata+0x68>
  70:	95 ff       	sbrs	r25, 5
  72:	fc cf       	rjmp	.-8      	; 0x6c <uart_putc>
	UDR1 = c; // output character saved in c
  74:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <_edata+0x6e>
}
  78:	08 95       	ret

0000007a <uart_puts>:

void uart_puts(char *s){
	while(*s){
  7a:	fc 01       	movw	r30, r24
  7c:	20 81       	ld	r18, Z
  7e:	22 23       	and	r18, r18
  80:	51 f0       	breq	.+20     	; 0x96 <uart_puts+0x1c>
  82:	31 96       	adiw	r30, 0x01	; 1
	while(!(UCSR1A & (1<<UDRE1))); // wait until sending is possible
  84:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <_edata+0x68>
  88:	95 ff       	sbrs	r25, 5
  8a:	fc cf       	rjmp	.-8      	; 0x84 <uart_puts+0xa>
	UDR1 = c; // output character saved in c
  8c:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <_edata+0x6e>
	while(*s){
  90:	21 91       	ld	r18, Z+
  92:	21 11       	cpse	r18, r1
  94:	f7 cf       	rjmp	.-18     	; 0x84 <uart_puts+0xa>
		uart_putc(*s);
		s++;
	}
}
  96:	08 95       	ret

00000098 <main>:
int main (void)
{
    //init_uart(9600);
    //uart_puts("hello world");

    PORTC |= (1 << DDC7);
  98:	47 9a       	sbi	0x08, 7	; 8
    //DDxn = 1 means output
    DDRC |= (1 << DDC7);
  9a:	3f 9a       	sbi	0x07, 7	; 7
    //ddrb = 1 & ddb5
    //PORtxn = 1
    for (;;) {
        PINC |= (1 << DDC7);
  9c:	37 9a       	sbi	0x06, 7	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	83 ec       	ldi	r24, 0xC3	; 195
  a2:	99 e0       	ldi	r25, 0x09	; 9
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0xc>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x16>
  ae:	00 00       	nop
  b0:	f5 cf       	rjmp	.-22     	; 0x9c <main+0x4>

000000b2 <__divmodsi4>:
  b2:	05 2e       	mov	r0, r21
  b4:	97 fb       	bst	r25, 7
  b6:	16 f4       	brtc	.+4      	; 0xbc <__divmodsi4+0xa>
  b8:	00 94       	com	r0
  ba:	0f d0       	rcall	.+30     	; 0xda <__negsi2>
  bc:	57 fd       	sbrc	r21, 7
  be:	05 d0       	rcall	.+10     	; 0xca <__divmodsi4_neg2>
  c0:	14 d0       	rcall	.+40     	; 0xea <__udivmodsi4>
  c2:	07 fc       	sbrc	r0, 7
  c4:	02 d0       	rcall	.+4      	; 0xca <__divmodsi4_neg2>
  c6:	46 f4       	brtc	.+16     	; 0xd8 <__divmodsi4_exit>
  c8:	08 c0       	rjmp	.+16     	; 0xda <__negsi2>

000000ca <__divmodsi4_neg2>:
  ca:	50 95       	com	r21
  cc:	40 95       	com	r20
  ce:	30 95       	com	r19
  d0:	21 95       	neg	r18
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	4f 4f       	sbci	r20, 0xFF	; 255
  d6:	5f 4f       	sbci	r21, 0xFF	; 255

000000d8 <__divmodsi4_exit>:
  d8:	08 95       	ret

000000da <__negsi2>:
  da:	90 95       	com	r25
  dc:	80 95       	com	r24
  de:	70 95       	com	r23
  e0:	61 95       	neg	r22
  e2:	7f 4f       	sbci	r23, 0xFF	; 255
  e4:	8f 4f       	sbci	r24, 0xFF	; 255
  e6:	9f 4f       	sbci	r25, 0xFF	; 255
  e8:	08 95       	ret

000000ea <__udivmodsi4>:
  ea:	a1 e2       	ldi	r26, 0x21	; 33
  ec:	1a 2e       	mov	r1, r26
  ee:	aa 1b       	sub	r26, r26
  f0:	bb 1b       	sub	r27, r27
  f2:	fd 01       	movw	r30, r26
  f4:	0d c0       	rjmp	.+26     	; 0x110 <__udivmodsi4_ep>

000000f6 <__udivmodsi4_loop>:
  f6:	aa 1f       	adc	r26, r26
  f8:	bb 1f       	adc	r27, r27
  fa:	ee 1f       	adc	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	a2 17       	cp	r26, r18
 100:	b3 07       	cpc	r27, r19
 102:	e4 07       	cpc	r30, r20
 104:	f5 07       	cpc	r31, r21
 106:	20 f0       	brcs	.+8      	; 0x110 <__udivmodsi4_ep>
 108:	a2 1b       	sub	r26, r18
 10a:	b3 0b       	sbc	r27, r19
 10c:	e4 0b       	sbc	r30, r20
 10e:	f5 0b       	sbc	r31, r21

00000110 <__udivmodsi4_ep>:
 110:	66 1f       	adc	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	88 1f       	adc	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	1a 94       	dec	r1
 11a:	69 f7       	brne	.-38     	; 0xf6 <__udivmodsi4_loop>
 11c:	60 95       	com	r22
 11e:	70 95       	com	r23
 120:	80 95       	com	r24
 122:	90 95       	com	r25
 124:	9b 01       	movw	r18, r22
 126:	ac 01       	movw	r20, r24
 128:	bd 01       	movw	r22, r26
 12a:	cf 01       	movw	r24, r30
 12c:	08 95       	ret

0000012e <_exit>:
 12e:	f8 94       	cli

00000130 <__stop_program>:
 130:	ff cf       	rjmp	.-2      	; 0x130 <__stop_program>
